
UDS27_CAN_hehe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f2c  08003f2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f34  08003f34  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f34  08003f34  00013f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000e0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008666  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001835  00000000  00000000  0002870a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  00029f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c0  00000000  00000000  0002a5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f2e5  00000000  00000000  0002ab78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006d42  00000000  00000000  00049e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b945a  00000000  00000000  00050b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00109ff9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002268  00000000  00000000  0010a04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003db8 	.word	0x08003db8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003db8 	.word	0x08003db8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Init_Tester>:
	TxData[2] = 0x01; //sub-service

}

void Init_Tester()
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0

   TxHeader.DLC = 8;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <Init_Tester+0x64>)
 8000570:	2208      	movs	r2, #8
 8000572:	611a      	str	r2, [r3, #16]
   TxHeader.ExtId = 0x11111111;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <Init_Tester+0x64>)
 8000576:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800057a:	605a      	str	r2, [r3, #4]
   TxHeader.IDE = CAN_ID_EXT;
 800057c:	4b13      	ldr	r3, [pc, #76]	; (80005cc <Init_Tester+0x64>)
 800057e:	2204      	movs	r2, #4
 8000580:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <Init_Tester+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = 46;
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <Init_Tester+0x64>)
 800058a:	222e      	movs	r2, #46	; 0x2e
 800058c:	601a      	str	r2, [r3, #0]
   TxHeader.TransmitGlobalTime = DISABLE;
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <Init_Tester+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	751a      	strb	r2, [r3, #20]

   TxData[0] = 0x27;
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <Init_Tester+0x68>)
 8000596:	2227      	movs	r2, #39	; 0x27
 8000598:	701a      	strb	r2, [r3, #0]
   TxData[1] = 0x01;
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <Init_Tester+0x68>)
 800059c:	2201      	movs	r2, #1
 800059e:	705a      	strb	r2, [r3, #1]
   for(int i =2 ; i<8;i++)
 80005a0:	2302      	movs	r3, #2
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	e007      	b.n	80005b6 <Init_Tester+0x4e>
   {
	   TxData[i] = 0x55;
 80005a6:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <Init_Tester+0x68>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4413      	add	r3, r2
 80005ac:	2255      	movs	r2, #85	; 0x55
 80005ae:	701a      	strb	r2, [r3, #0]
   for(int i =2 ; i<8;i++)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3301      	adds	r3, #1
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2b07      	cmp	r3, #7
 80005ba:	ddf4      	ble.n	80005a6 <Init_Tester+0x3e>
   }
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000108 	.word	0x20000108
 80005d0:	200000cc 	.word	0x200000cc

080005d4 <Init_ECU>:


void Init_ECU()
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0

   TxHeader.DLC = 8;
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <Init_ECU+0x48>)
 80005da:	2208      	movs	r2, #8
 80005dc:	611a      	str	r2, [r3, #16]
   TxHeader.ExtId = 0x11111111;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <Init_ECU+0x48>)
 80005e0:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80005e4:	605a      	str	r2, [r3, #4]
   TxHeader.IDE = CAN_ID_EXT;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <Init_ECU+0x48>)
 80005e8:	2204      	movs	r2, #4
 80005ea:	609a      	str	r2, [r3, #8]
   TxHeader.RTR = CAN_RTR_DATA;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <Init_ECU+0x48>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
   TxHeader.StdId = 0x104;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <Init_ECU+0x48>)
 80005f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f8:	601a      	str	r2, [r3, #0]
   TxHeader.TransmitGlobalTime = DISABLE;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <Init_ECU+0x48>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	751a      	strb	r2, [r3, #20]

   TxData[0] = 0x06;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <Init_ECU+0x4c>)
 8000602:	2206      	movs	r2, #6
 8000604:	701a      	strb	r2, [r3, #0]
   TxData[1] = 0x67;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <Init_ECU+0x4c>)
 8000608:	2267      	movs	r2, #103	; 0x67
 800060a:	705a      	strb	r2, [r3, #1]
   TxData[2] = 0x01;
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <Init_ECU+0x4c>)
 800060e:	2201      	movs	r2, #1
 8000610:	709a      	strb	r2, [r3, #2]
//   for(int i =3 ; i<8;i++)
//   {
//	   TxData[i] = 0x55;
//   }
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000108 	.word	0x20000108
 8000620:	200000cc 	.word	0x200000cc

08000624 <Compare_key>:
//		temp_key[i] = *(key+i);
//	}
//	return temp_key;
//}
void Compare_key()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	for(int i = 3 ; i< 7 ;i++)
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	e00f      	b.n	8000650 <Compare_key+0x2c>
	{
		if(RxData[i] != Key[i -3])
 8000630:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <Compare_key+0x8c>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4413      	add	r3, r2
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3b03      	subs	r3, #3
 800063c:	491d      	ldr	r1, [pc, #116]	; (80006b4 <Compare_key+0x90>)
 800063e:	5ccb      	ldrb	r3, [r1, r3]
 8000640:	429a      	cmp	r2, r3
 8000642:	d002      	beq.n	800064a <Compare_key+0x26>
		{
			isBlock = 2;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <Compare_key+0x94>)
 8000646:	2202      	movs	r2, #2
 8000648:	601a      	str	r2, [r3, #0]
	for(int i = 3 ; i< 7 ;i++)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3301      	adds	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b06      	cmp	r3, #6
 8000654:	ddec      	ble.n	8000630 <Compare_key+0xc>
		}
	}
	if(isBlock != 2)
 8000656:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <Compare_key+0x94>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b02      	cmp	r3, #2
 800065c:	d024      	beq.n	80006a8 <Compare_key+0x84>
	{
		isBlock = 0;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <Compare_key+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
		TxData[0] = 0x02;
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <Compare_key+0x98>)
 8000666:	2202      	movs	r2, #2
 8000668:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0x67;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <Compare_key+0x98>)
 800066c:	2267      	movs	r2, #103	; 0x67
 800066e:	705a      	strb	r2, [r3, #1]
		TxData[2] = 0x02;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <Compare_key+0x98>)
 8000672:	2202      	movs	r2, #2
 8000674:	709a      	strb	r2, [r3, #2]
		for(int i= 3 ; i < 8 ;i++)
 8000676:	2303      	movs	r3, #3
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	e007      	b.n	800068c <Compare_key+0x68>
		{
			TxData[i] = 0x55;
 800067c:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <Compare_key+0x98>)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	2255      	movs	r2, #85	; 0x55
 8000684:	701a      	strb	r2, [r3, #0]
		for(int i= 3 ; i < 8 ;i++)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b07      	cmp	r3, #7
 8000690:	ddf4      	ble.n	800067c <Compare_key+0x58>

		}
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2101      	movs	r1, #1
 8000696:	480a      	ldr	r0, [pc, #40]	; (80006c0 <Compare_key+0x9c>)
 8000698:	f001 fece 	bl	8002438 <HAL_GPIO_WritePin>
		HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <Compare_key+0xa0>)
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <Compare_key+0x98>)
 80006a0:	4909      	ldr	r1, [pc, #36]	; (80006c8 <Compare_key+0xa4>)
 80006a2:	480a      	ldr	r0, [pc, #40]	; (80006cc <Compare_key+0xa8>)
 80006a4:	f000 ffd8 	bl	8001658 <HAL_CAN_AddTxMessage>
	}
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000d8 	.word	0x200000d8
 80006b4:	20000120 	.word	0x20000120
 80006b8:	20000000 	.word	0x20000000
 80006bc:	200000cc 	.word	0x200000cc
 80006c0:	40020400 	.word	0x40020400
 80006c4:	200000d4 	.word	0x200000d4
 80006c8:	20000108 	.word	0x20000108
 80006cc:	200000a4 	.word	0x200000a4

080006d0 <Calculator_Key>:

void Calculator_Key()
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
	for(int i= 3 ; i < 7 ;i++)
 80006d6:	2303      	movs	r3, #3
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	e00d      	b.n	80006f8 <Calculator_Key+0x28>
	{
		TxData[i] = RxData[i] + 1;
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <Calculator_Key+0x3c>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	b2d9      	uxtb	r1, r3
 80006e8:	4a09      	ldr	r2, [pc, #36]	; (8000710 <Calculator_Key+0x40>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	460a      	mov	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
	for(int i= 3 ; i < 7 ;i++)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	ddee      	ble.n	80006dc <Calculator_Key+0xc>

	}
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	200000d8 	.word	0x200000d8
 8000710:	200000cc 	.word	0x200000cc

08000714 <Generate_Seed>:

void Generate_Seed()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0

	for(int i = 3 ;i < 7; i++)
 800071a:	2303      	movs	r3, #3
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	e021      	b.n	8000764 <Generate_Seed+0x50>
	{
		TxData[i] = rand()% 0xff;
 8000720:	f002 fb48 	bl	8002db4 <rand>
 8000724:	4602      	mov	r2, r0
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <Generate_Seed+0x64>)
 8000728:	fb83 1302 	smull	r1, r3, r3, r2
 800072c:	4413      	add	r3, r2
 800072e:	11d9      	asrs	r1, r3, #7
 8000730:	17d3      	asrs	r3, r2, #31
 8000732:	1ac9      	subs	r1, r1, r3
 8000734:	460b      	mov	r3, r1
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	1a5b      	subs	r3, r3, r1
 800073a:	1ad1      	subs	r1, r2, r3
 800073c:	b2c9      	uxtb	r1, r1
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <Generate_Seed+0x68>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
		Key[i] = TxData[i] + 1;
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <Generate_Seed+0x68>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	b2d9      	uxtb	r1, r3
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <Generate_Seed+0x6c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	460a      	mov	r2, r1
 800075c:	701a      	strb	r2, [r3, #0]
	for(int i = 3 ;i < 7; i++)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3301      	adds	r3, #1
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b06      	cmp	r3, #6
 8000768:	ddda      	ble.n	8000720 <Generate_Seed+0xc>
	}
	TxData[7] = 0x55;
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <Generate_Seed+0x68>)
 800076c:	2255      	movs	r2, #85	; 0x55
 800076e:	71da      	strb	r2, [r3, #7]
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	80808081 	.word	0x80808081
 800077c:	200000cc 	.word	0x200000cc
 8000780:	20000120 	.word	0x20000120

08000784 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000794:	d114      	bne.n	80007c0 <HAL_GPIO_EXTI_Callback+0x3c>
//		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2101      	movs	r1, #1
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x44>)
 800079c:	f001 fe4c 	bl	8002438 <HAL_GPIO_WritePin>


		Init_Tester();
 80007a0:	f7ff fee2 	bl	8000568 <Init_Tester>
		// Send request seed to ECU
		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_GPIO_EXTI_Callback+0x48>)
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80007a8:	490a      	ldr	r1, [pc, #40]	; (80007d4 <HAL_GPIO_EXTI_Callback+0x50>)
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <HAL_GPIO_EXTI_Callback+0x54>)
 80007ac:	f000 ff54 	bl	8001658 <HAL_CAN_AddTxMessage>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <HAL_GPIO_EXTI_Callback+0x3c>
		  {

		  	  	HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2102      	movs	r1, #2
 80007ba:	4803      	ldr	r0, [pc, #12]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x44>)
 80007bc:	f001 fe3c 	bl	8002438 <HAL_GPIO_WritePin>

		  };
	}
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40020400 	.word	0x40020400
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	200000cc 	.word	0x200000cc
 80007d4:	20000108 	.word	0x20000108
 80007d8:	200000e0 	.word	0x200000e0

080007dc <Processing_ECU>:


void Processing_ECU()
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	Init_ECU();
 80007e0:	f7ff fef8 	bl	80005d4 <Init_ECU>
	//Check request service
	if(RxData[0] == 0x27)
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <Processing_ECU+0x38>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b27      	cmp	r3, #39	; 0x27
 80007ea:	d111      	bne.n	8000810 <Processing_ECU+0x34>
	{
		//check seed request
		if(RxData[1] == 0x01)
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <Processing_ECU+0x38>)
 80007ee:	785b      	ldrb	r3, [r3, #1]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d107      	bne.n	8000804 <Processing_ECU+0x28>
		{
			//Creat seed
			Generate_Seed();
 80007f4:	f7ff ff8e 	bl	8000714 <Generate_Seed>
			//send Seed to Tester
			HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <Processing_ECU+0x3c>)
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <Processing_ECU+0x40>)
 80007fc:	4908      	ldr	r1, [pc, #32]	; (8000820 <Processing_ECU+0x44>)
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <Processing_ECU+0x48>)
 8000800:	f000 ff2a 	bl	8001658 <HAL_CAN_AddTxMessage>
		}
		//check key request
		if(RxData[1] == 0x02)
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <Processing_ECU+0x38>)
 8000806:	785b      	ldrb	r3, [r3, #1]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d101      	bne.n	8000810 <Processing_ECU+0x34>
		{
			Compare_key();
 800080c:	f7ff ff0a 	bl	8000624 <Compare_key>
		}
	}

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000d8 	.word	0x200000d8
 8000818:	200000d4 	.word	0x200000d4
 800081c:	200000cc 	.word	0x200000cc
 8000820:	20000108 	.word	0x20000108
 8000824:	200000a4 	.word	0x200000a4

08000828 <Processing_Tester>:


void Processing_Tester()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	Init_Tester();
 800082c:	f7ff fe9c 	bl	8000568 <Init_Tester>
	//check responsive
	if(RxData[1] == 0x67)
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <Processing_Tester+0x34>)
 8000832:	785b      	ldrb	r3, [r3, #1]
 8000834:	2b67      	cmp	r3, #103	; 0x67
 8000836:	d10e      	bne.n	8000856 <Processing_Tester+0x2e>
	{
		//response seed
		if(RxData[2] == 0x01)
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <Processing_Tester+0x34>)
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10a      	bne.n	8000856 <Processing_Tester+0x2e>
		{
			//chance service
			TxData[2] = 0x02;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <Processing_Tester+0x38>)
 8000842:	2202      	movs	r2, #2
 8000844:	709a      	strb	r2, [r3, #2]
			Calculator_Key();
 8000846:	f7ff ff43 	bl	80006d0 <Calculator_Key>
			//send key request to ECU
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <Processing_Tester+0x3c>)
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <Processing_Tester+0x38>)
 800084e:	4906      	ldr	r1, [pc, #24]	; (8000868 <Processing_Tester+0x40>)
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <Processing_Tester+0x44>)
 8000852:	f000 ff01 	bl	8001658 <HAL_CAN_AddTxMessage>
		}
	}
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000d8 	.word	0x200000d8
 8000860:	200000cc 	.word	0x200000cc
 8000864:	200000d4 	.word	0x200000d4
 8000868:	20000108 	.word	0x20000108
 800086c:	200000e0 	.word	0x200000e0

08000870 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	//check recive
	HAL_GPIO_WritePin(GPIOB, LED3_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2104      	movs	r1, #4
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800087e:	f001 fddb 	bl	8002438 <HAL_GPIO_WritePin>
	//ECU get Message
	if(HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0 , &RxHeader, RxData) == HAL_OK)
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000886:	2100      	movs	r1, #0
 8000888:	4813      	ldr	r0, [pc, #76]	; (80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800088a:	f000 ffc0 	bl	800180e <HAL_CAN_GetRxMessage>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d106      	bne.n	80008a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
		{
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2101      	movs	r1, #1
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800089a:	f001 fdcd 	bl	8002438 <HAL_GPIO_WritePin>
			Processing_ECU();
 800089e:	f7ff ff9d 	bl	80007dc <Processing_ECU>
		};
	//Tester get Message
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0 , &RxHeader, RxData) == HAL_OK)
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80008a4:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80008aa:	f000 ffb0 	bl	800180e <HAL_CAN_GetRxMessage>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d106      	bne.n	80008c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		{
			HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2101      	movs	r1, #1
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80008ba:	f001 fdbd 	bl	8002438 <HAL_GPIO_WritePin>
			Processing_Tester();
 80008be:	f7ff ffb3 	bl	8000828 <Processing_Tester>
////		Setup_TxHeader();
//		Processing_Tester();
//
//
//	}
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020400 	.word	0x40020400
 80008d0:	200000d8 	.word	0x200000d8
 80008d4:	20000124 	.word	0x20000124
 80008d8:	200000a4 	.word	0x200000a4
 80008dc:	200000e0 	.word	0x200000e0

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f000 fc01 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f84b 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f000 f955 	bl	8000b9c <MX_GPIO_Init>
  MX_CAN1_Init();
 80008f2:	f000 f8af 	bl	8000a54 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008f6:	f000 f8ff 	bl	8000af8 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <main+0x90>)
 80008fc:	f000 fe68 	bl	80015d0 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000900:	481c      	ldr	r0, [pc, #112]	; (8000974 <main+0x94>)
 8000902:	f000 fe65 	bl	80015d0 <HAL_CAN_Start>
//  /* Notification Error */
////	  HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
//	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, 1);
//  }

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000906:	2102      	movs	r1, #2
 8000908:	4819      	ldr	r0, [pc, #100]	; (8000970 <main+0x90>)
 800090a:	f001 f892 	bl	8001a32 <HAL_CAN_ActivateNotification>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d009      	beq.n	8000928 <main+0x48>
   {
   /* Notification Error */
 //	  HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 	  HAL_GPIO_WritePin(GPIOB, LED1_Pin, 1);
 8000914:	2201      	movs	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	4817      	ldr	r0, [pc, #92]	; (8000978 <main+0x98>)
 800091a:	f001 fd8d 	bl	8002438 <HAL_GPIO_WritePin>
 	  HAL_GPIO_WritePin(GPIOB, LED2_Pin, 1);
 800091e:	2201      	movs	r2, #1
 8000920:	2102      	movs	r1, #2
 8000922:	4815      	ldr	r0, [pc, #84]	; (8000978 <main+0x98>)
 8000924:	f001 fd88 	bl	8002438 <HAL_GPIO_WritePin>
   }

  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000928:	2102      	movs	r1, #2
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <main+0x94>)
 800092c:	f001 f881 	bl	8001a32 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (datacheck == 1)
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <main+0x9c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d114      	bne.n	8000962 <main+0x82>
	  {
		  for(int i =0 ; i < RxData[1] ;i++)
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	e00b      	b.n	8000956 <main+0x76>
		  {
			  HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800093e:	2101      	movs	r1, #1
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <main+0x98>)
 8000942:	f001 fd92 	bl	800246a <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <main+0xa0>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fc40 	bl	80011d0 <HAL_Delay>
		  for(int i =0 ; i < RxData[1] ;i++)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3301      	adds	r3, #1
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <main+0xa0>)
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4293      	cmp	r3, r2
 8000960:	dbed      	blt.n	800093e <main+0x5e>
		  }
	  }

	  HAL_Delay(250);
 8000962:	20fa      	movs	r0, #250	; 0xfa
 8000964:	f000 fc34 	bl	80011d0 <HAL_Delay>
//	  if(HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//	 		  {
//
//	 		  	  	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
//	 		  };
	  HAL_Delay(250);
 8000968:	20fa      	movs	r0, #250	; 0xfa
 800096a:	f000 fc31 	bl	80011d0 <HAL_Delay>
	  if (datacheck == 1)
 800096e:	e7df      	b.n	8000930 <main+0x50>
 8000970:	200000e0 	.word	0x200000e0
 8000974:	200000a4 	.word	0x200000a4
 8000978:	40020400 	.word	0x40020400
 800097c:	20000090 	.word	0x20000090
 8000980:	200000d8 	.word	0x200000d8

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b094      	sub	sp, #80	; 0x50
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0320 	add.w	r3, r7, #32
 800098e:	2230      	movs	r2, #48	; 0x30
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fa06 	bl	8002da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	4b27      	ldr	r3, [pc, #156]	; (8000a4c <SystemClock_Config+0xc8>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <SystemClock_Config+0xc8>)
 80009b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b6:	6413      	str	r3, [r2, #64]	; 0x40
 80009b8:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <SystemClock_Config+0xc8>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <SystemClock_Config+0xcc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <SystemClock_Config+0xcc>)
 80009ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <SystemClock_Config+0xcc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e0:	2301      	movs	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009f8:	2332      	movs	r3, #50	; 0x32
 80009fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a00:	2304      	movs	r3, #4
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a04:	f107 0320 	add.w	r3, r7, #32
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 fd61 	bl	80024d0 <HAL_RCC_OscConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a14:	f000 f944 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a18:	230f      	movs	r3, #15
 8000a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2101      	movs	r1, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 ffc3 	bl	80029c0 <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a40:	f000 f92e 	bl	8000ca0 <Error_Handler>
  }
}
 8000a44:	bf00      	nop
 8000a46:	3750      	adds	r7, #80	; 0x50
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a5c:	4a25      	ldr	r2, [pc, #148]	; (8000af4 <MX_CAN1_Init+0xa0>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a62:	220a      	movs	r2, #10
 8000a64:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a78:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a80:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a82:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aa6:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000aa8:	f000 fbb6 	bl	8001218 <HAL_CAN_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000ab2:	f000 f8f5 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    CAN_FilterTypeDef canfilterconfig;
    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 14;
 8000ada:	230e      	movs	r3, #14
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <MX_CAN1_Init+0x9c>)
 8000ae4:	f000 fc94 	bl	8001410 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000e0 	.word	0x200000e0
 8000af4:	40006400 	.word	0x40006400

08000af8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b00:	4a25      	ldr	r2, [pc, #148]	; (8000b98 <MX_CAN2_Init+0xa0>)
 8000b02:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b06:	220a      	movs	r2, #10
 8000b08:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b18:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b24:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b4a:	4812      	ldr	r0, [pc, #72]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b4c:	f000 fb64 	bl	8001218 <HAL_CAN_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000b56:	f000 f8a3 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef canfilterconfig1;
  canfilterconfig1.FilterActivation = CAN_FILTER_ENABLE;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  canfilterconfig1.FilterBank = 14;
 8000b5e:	230e      	movs	r3, #14
 8000b60:	617b      	str	r3, [r7, #20]
  canfilterconfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  canfilterconfig1.FilterIdHigh = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
  canfilterconfig1.FilterIdLow = 0x0000;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  canfilterconfig1.FilterMaskIdHigh = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  canfilterconfig1.FilterMaskIdLow = 0x0000;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  canfilterconfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  canfilterconfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
  canfilterconfig1.SlaveStartFilterBank = 14;
 8000b7e:	230e      	movs	r3, #14
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig1);
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <MX_CAN2_Init+0x9c>)
 8000b88:	f000 fc42 	bl	8001410 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000a4 	.word	0x200000a4
 8000b98:	40006800 	.word	0x40006800

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a36      	ldr	r2, [pc, #216]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b30      	ldr	r3, [pc, #192]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_GPIO_Init+0xf8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2107      	movs	r1, #7
 8000c26:	481c      	ldr	r0, [pc, #112]	; (8000c98 <MX_GPIO_Init+0xfc>)
 8000c28:	f001 fc06 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4816      	ldr	r0, [pc, #88]	; (8000c9c <MX_GPIO_Init+0x100>)
 8000c44:	f001 fa5c 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000c48:	2310      	movs	r3, #16
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <MX_GPIO_Init+0x100>)
 8000c5c:	f001 fa50 	bl	8002100 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c60:	2307      	movs	r3, #7
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4808      	ldr	r0, [pc, #32]	; (8000c98 <MX_GPIO_Init+0xfc>)
 8000c78:	f001 fa42 	bl	8002100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2100      	movs	r1, #0
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f001 fa06 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c86:	2028      	movs	r0, #40	; 0x28
 8000c88:	f001 fa1f 	bl	80020ca <HAL_NVIC_EnableIRQ>

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40020800 	.word	0x40020800

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800

08000cfc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08c      	sub	sp, #48	; 0x30
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a4a      	ldr	r2, [pc, #296]	; (8000e44 <HAL_CAN_MspInit+0x148>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d13e      	bne.n	8000d9c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d1e:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_CAN_MspInit+0x14c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a48      	ldr	r2, [pc, #288]	; (8000e48 <HAL_CAN_MspInit+0x14c>)
 8000d26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d28:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <HAL_CAN_MspInit+0x14c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d10d      	bne.n	8000d4c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	4b45      	ldr	r3, [pc, #276]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a3d      	ldr	r2, [pc, #244]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b3b      	ldr	r3, [pc, #236]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4832      	ldr	r0, [pc, #200]	; (8000e50 <HAL_CAN_MspInit+0x154>)
 8000d86:	f001 f9bb 	bl	8002100 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2014      	movs	r0, #20
 8000d90:	f001 f97f 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d94:	2014      	movs	r0, #20
 8000d96:	f001 f998 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000d9a:	e04f      	b.n	8000e3c <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a2c      	ldr	r2, [pc, #176]	; (8000e54 <HAL_CAN_MspInit+0x158>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d14a      	bne.n	8000e3c <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000db0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_CAN_MspInit+0x14c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <HAL_CAN_MspInit+0x14c>)
 8000dca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <HAL_CAN_MspInit+0x14c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10d      	bne.n	8000df0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_CAN_MspInit+0x150>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e0c:	2360      	movs	r3, #96	; 0x60
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_CAN_MspInit+0x15c>)
 8000e28:	f001 f96a 	bl	8002100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2040      	movs	r0, #64	; 0x40
 8000e32:	f001 f92e 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000e36:	2040      	movs	r0, #64	; 0x40
 8000e38:	f001 f947 	bl	80020ca <HAL_NVIC_EnableIRQ>
}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40006400 	.word	0x40006400
 8000e48:	20000094 	.word	0x20000094
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40006800 	.word	0x40006800
 8000e58:	40020400 	.word	0x40020400

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea8:	f000 f972 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <CAN1_RX0_IRQHandler+0x10>)
 8000eb6:	f000 fde2 	bl	8001a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000e0 	.word	0x200000e0

08000ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ec8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ecc:	f001 fae8 	bl	80024a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <CAN2_RX0_IRQHandler+0x10>)
 8000eda:	f000 fdd0 	bl	8001a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000a4 	.word	0x200000a4

08000ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	return 1;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_kill>:

int _kill(int pid, int sig)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f02:	f001 ff25 	bl	8002d50 <__errno>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2216      	movs	r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_exit>:

void _exit (int status)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe7 	bl	8000ef8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f2a:	e7fe      	b.n	8000f2a <_exit+0x12>

08000f2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e00a      	b.n	8000f54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f3e:	f3af 8000 	nop.w
 8000f42:	4601      	mov	r1, r0
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	60ba      	str	r2, [r7, #8]
 8000f4a:	b2ca      	uxtb	r2, r1
 8000f4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf0      	blt.n	8000f3e <_read+0x12>
	}

return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e009      	b.n	8000f8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	60ba      	str	r2, [r7, #8]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf1      	blt.n	8000f78 <_write+0x12>
	}
	return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_close>:

int _close(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_isatty>:

int _isatty(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	return 1;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	; (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f001 fe8a 	bl	8002d50 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20020000 	.word	0x20020000
 8001068:	00000400 	.word	0x00000400
 800106c:	20000098 	.word	0x20000098
 8001070:	20000158 	.word	0x20000158

08001074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	; (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800109e:	490e      	ldr	r1, [pc, #56]	; (80010d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a0:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a4:	e002      	b.n	80010ac <LoopCopyDataInit>

080010a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010aa:	3304      	adds	r3, #4

080010ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b0:	d3f9      	bcc.n	80010a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010b4:	4c0b      	ldr	r4, [pc, #44]	; (80010e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b8:	e001      	b.n	80010be <LoopFillZerobss>

080010ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010bc:	3204      	adds	r2, #4

080010be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c0:	d3fb      	bcc.n	80010ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010c2:	f7ff ffd7 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c6:	f001 fe49 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ca:	f7ff fc09 	bl	80008e0 <main>
  bx  lr    
 80010ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010dc:	08003f3c 	.word	0x08003f3c
  ldr r2, =_sbss
 80010e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010e4:	20000154 	.word	0x20000154

080010e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	; (800112c <HAL_Init+0x40>)
 80010f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_Init+0x40>)
 8001102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a07      	ldr	r2, [pc, #28]	; (800112c <HAL_Init+0x40>)
 800110e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001114:	2003      	movs	r0, #3
 8001116:	f000 ffb1 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800111a:	200f      	movs	r0, #15
 800111c:	f000 f808 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001120:	f7ff fdc4 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 ffc9 	bl	80020e6 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 ff91 	bl	8002092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000004 	.word	0x20000004
 8001188:	2000000c 	.word	0x2000000c
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000000c 	.word	0x2000000c
 80011b4:	20000140 	.word	0x20000140

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000140 	.word	0x20000140

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000000c 	.word	0x2000000c

08001218 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0ed      	b.n	8001406 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fd60 	bl	8000cfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800124c:	f7ff ffb4 	bl	80011b8 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001252:	e012      	b.n	800127a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001254:	f7ff ffb0 	bl	80011b8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b0a      	cmp	r3, #10
 8001260:	d90b      	bls.n	800127a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2205      	movs	r2, #5
 8001272:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0c5      	b.n	8001406 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0e5      	beq.n	8001254 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0202 	bic.w	r2, r2, #2
 8001296:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001298:	f7ff ff8e 	bl	80011b8 <HAL_GetTick>
 800129c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800129e:	e012      	b.n	80012c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012a0:	f7ff ff8a 	bl	80011b8 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b0a      	cmp	r3, #10
 80012ac:	d90b      	bls.n	80012c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2205      	movs	r2, #5
 80012be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e09f      	b.n	8001406 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e5      	bne.n	80012a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7e1b      	ldrb	r3, [r3, #24]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e007      	b.n	80012fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e5b      	ldrb	r3, [r3, #25]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e007      	b.n	8001328 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001326:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e9b      	ldrb	r3, [r3, #26]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d108      	bne.n	8001342 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0220 	orr.w	r2, r2, #32
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e007      	b.n	8001352 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0220 	bic.w	r2, r2, #32
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7edb      	ldrb	r3, [r3, #27]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d108      	bne.n	800136c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0210 	bic.w	r2, r2, #16
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e007      	b.n	800137c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0210 	orr.w	r2, r2, #16
 800137a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	7f1b      	ldrb	r3, [r3, #28]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d108      	bne.n	8001396 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0208 	orr.w	r2, r2, #8
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e007      	b.n	80013a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0208 	bic.w	r2, r2, #8
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7f5b      	ldrb	r3, [r3, #29]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0204 	orr.w	r2, r2, #4
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	e007      	b.n	80013d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	ea42 0103 	orr.w	r1, r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001426:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001428:	7cfb      	ldrb	r3, [r7, #19]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d003      	beq.n	8001436 <HAL_CAN_ConfigFilter+0x26>
 800142e:	7cfb      	ldrb	r3, [r7, #19]
 8001430:	2b02      	cmp	r3, #2
 8001432:	f040 80be 	bne.w	80015b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <HAL_CAN_ConfigFilter+0x1bc>)
 8001438:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001440:	f043 0201 	orr.w	r2, r3, #1
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001450:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	431a      	orrs	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2201      	movs	r2, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43db      	mvns	r3, r3
 8001488:	401a      	ands	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d123      	bne.n	80014e0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3248      	adds	r2, #72	; 0x48
 80014c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014d6:	6979      	ldr	r1, [r7, #20]
 80014d8:	3348      	adds	r3, #72	; 0x48
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	440b      	add	r3, r1
 80014de:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d122      	bne.n	800152e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001508:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3248      	adds	r2, #72	; 0x48
 800150e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001522:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001524:	6979      	ldr	r1, [r7, #20]
 8001526:	3348      	adds	r3, #72	; 0x48
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001548:	e007      	b.n	800155a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	431a      	orrs	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43db      	mvns	r3, r3
 800156c:	401a      	ands	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001574:	e007      	b.n	8001586 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	431a      	orrs	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	431a      	orrs	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015a4:	f023 0201 	bic.w	r2, r3, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e006      	b.n	80015c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40006400 	.word	0x40006400

080015d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d12e      	bne.n	8001642 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2202      	movs	r2, #2
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015fc:	f7ff fddc 	bl	80011b8 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001602:	e012      	b.n	800162a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001604:	f7ff fdd8 	bl	80011b8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d90b      	bls.n	800162a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2205      	movs	r2, #5
 8001622:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e012      	b.n	8001650 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e5      	bne.n	8001604 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e006      	b.n	8001650 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
  }
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d003      	beq.n	8001684 <HAL_CAN_AddTxMessage+0x2c>
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	2b02      	cmp	r3, #2
 8001680:	f040 80b8 	bne.w	80017f4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10a      	bne.n	80016a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 80a0 	beq.w	80017e4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	0e1b      	lsrs	r3, r3, #24
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d907      	bls.n	80016c4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e09e      	b.n	8001802 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016c4:	2201      	movs	r2, #1
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	409a      	lsls	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016e0:	68f9      	ldr	r1, [r7, #12]
 80016e2:	6809      	ldr	r1, [r1, #0]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3318      	adds	r3, #24
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	440b      	add	r3, r1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e00f      	b.n	8001712 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016fc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001702:	68f9      	ldr	r1, [r7, #12]
 8001704:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001706:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3318      	adds	r3, #24
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	440b      	add	r3, r1
 8001710:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3318      	adds	r3, #24
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	440b      	add	r3, r1
 8001722:	3304      	adds	r3, #4
 8001724:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	7d1b      	ldrb	r3, [r3, #20]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d111      	bne.n	8001752 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3318      	adds	r3, #24
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	4413      	add	r3, r2
 800173a:	3304      	adds	r3, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	6811      	ldr	r1, [r2, #0]
 8001742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3318      	adds	r3, #24
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	440b      	add	r3, r1
 800174e:	3304      	adds	r3, #4
 8001750:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3307      	adds	r3, #7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	061a      	lsls	r2, r3, #24
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3306      	adds	r3, #6
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3305      	adds	r3, #5
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	4313      	orrs	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	3204      	adds	r2, #4
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	4610      	mov	r0, r2
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	6811      	ldr	r1, [r2, #0]
 800177a:	ea43 0200 	orr.w	r2, r3, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	440b      	add	r3, r1
 8001784:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001788:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3303      	adds	r3, #3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	061a      	lsls	r2, r3, #24
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3302      	adds	r3, #2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3301      	adds	r3, #1
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	4313      	orrs	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	4610      	mov	r0, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	6811      	ldr	r1, [r2, #0]
 80017b0:	ea43 0200 	orr.w	r2, r3, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	440b      	add	r3, r1
 80017ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80017be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3318      	adds	r3, #24
 80017c8:	011b      	lsls	r3, r3, #4
 80017ca:	4413      	add	r3, r2
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3318      	adds	r3, #24
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e00e      	b.n	8001802 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e006      	b.n	8001802 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
  }
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800180e:	b480      	push	{r7}
 8001810:	b087      	sub	sp, #28
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001822:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001824:	7dfb      	ldrb	r3, [r7, #23]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d003      	beq.n	8001832 <HAL_CAN_GetRxMessage+0x24>
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	2b02      	cmp	r3, #2
 800182e:	f040 80f3 	bne.w	8001a18 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10e      	bne.n	8001856 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0e7      	b.n	8001a26 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0d8      	b.n	8001a26 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	331b      	adds	r3, #27
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	4413      	add	r3, r2
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0204 	and.w	r2, r3, #4
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10c      	bne.n	80018ac <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	331b      	adds	r3, #27
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0d5b      	lsrs	r3, r3, #21
 80018a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	331b      	adds	r3, #27
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	4413      	add	r3, r2
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	331b      	adds	r3, #27
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0202 	and.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	331b      	adds	r3, #27
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	4413      	add	r3, r2
 80018e6:	3304      	adds	r3, #4
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 020f 	and.w	r2, r3, #15
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	331b      	adds	r3, #27
 80018fa:	011b      	lsls	r3, r3, #4
 80018fc:	4413      	add	r3, r2
 80018fe:	3304      	adds	r3, #4
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b2da      	uxtb	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	331b      	adds	r3, #27
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4413      	add	r3, r2
 8001916:	3304      	adds	r3, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0c1b      	lsrs	r3, r3, #16
 800191c:	b29a      	uxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	4413      	add	r3, r2
 800192c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	4413      	add	r3, r2
 8001942:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0a1a      	lsrs	r2, r3, #8
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0c1a      	lsrs	r2, r3, #16
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3302      	adds	r3, #2
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	4413      	add	r3, r2
 8001976:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	0e1a      	lsrs	r2, r3, #24
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	3303      	adds	r3, #3
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	011b      	lsls	r3, r3, #4
 800198e:	4413      	add	r3, r2
 8001990:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	3304      	adds	r3, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0a1a      	lsrs	r2, r3, #8
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	3305      	adds	r3, #5
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	0c1a      	lsrs	r2, r3, #16
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	3306      	adds	r3, #6
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4413      	add	r3, r2
 80019dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	0e1a      	lsrs	r2, r3, #24
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	3307      	adds	r3, #7
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d108      	bne.n	8001a04 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0220 	orr.w	r2, r2, #32
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	e007      	b.n	8001a14 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0220 	orr.w	r2, r2, #32
 8001a12:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e006      	b.n	8001a26 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a42:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d002      	beq.n	8001a50 <HAL_CAN_ActivateNotification+0x1e>
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d109      	bne.n	8001a64 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6959      	ldr	r1, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e006      	b.n	8001a72 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
  }
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b08a      	sub	sp, #40	; 0x28
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d07c      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d023      	beq.n	8001b16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f983 	bl	8001dec <HAL_CAN_TxMailbox0CompleteCallback>
 8001ae6:	e016      	b.n	8001b16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
 8001afa:	e00c      	b.n	8001b16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d004      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e002      	b.n	8001b16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f989 	bl	8001e28 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d024      	beq.n	8001b6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f963 	bl	8001e00 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b3a:	e016      	b.n	8001b6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4e:	e00c      	b.n	8001b6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e002      	b.n	8001b6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f969 	bl	8001e3c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d024      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f943 	bl	8001e14 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b8e:	e016      	b.n	8001bbe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e00c      	b.n	8001bbe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	e002      	b.n	8001bbe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f949 	bl	8001e50 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00c      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f003 0310 	and.w	r3, r3, #16
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2210      	movs	r2, #16
 8001be0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f930 	bl	8001e64 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7fe fe27 	bl	8000870 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00c      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2210      	movs	r2, #16
 8001c44:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2208      	movs	r2, #8
 8001c60:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f912 	bl	8001e8c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8f9 	bl	8001e78 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00b      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d006      	beq.n	8001ca8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8fc 	bl	8001ea0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8f5 	bl	8001eb4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d07b      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d072      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d008      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d043      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d03e      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d4c:	2b60      	cmp	r3, #96	; 0x60
 8001d4e:	d02b      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x32a>
 8001d50:	2b60      	cmp	r3, #96	; 0x60
 8001d52:	d82e      	bhi.n	8001db2 <HAL_CAN_IRQHandler+0x334>
 8001d54:	2b50      	cmp	r3, #80	; 0x50
 8001d56:	d022      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x320>
 8001d58:	2b50      	cmp	r3, #80	; 0x50
 8001d5a:	d82a      	bhi.n	8001db2 <HAL_CAN_IRQHandler+0x334>
 8001d5c:	2b40      	cmp	r3, #64	; 0x40
 8001d5e:	d019      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x316>
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d826      	bhi.n	8001db2 <HAL_CAN_IRQHandler+0x334>
 8001d64:	2b30      	cmp	r3, #48	; 0x30
 8001d66:	d010      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x30c>
 8001d68:	2b30      	cmp	r3, #48	; 0x30
 8001d6a:	d822      	bhi.n	8001db2 <HAL_CAN_IRQHandler+0x334>
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d002      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x2f8>
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d005      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d74:	e01d      	b.n	8001db2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	f043 0308 	orr.w	r3, r3, #8
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d7e:	e019      	b.n	8001db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d88:	e014      	b.n	8001db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	f043 0320 	orr.w	r3, r3, #32
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d92:	e00f      	b.n	8001db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d9c:	e00a      	b.n	8001db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001da6:	e005      	b.n	8001db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001db0:	e000      	b.n	8001db4 <HAL_CAN_IRQHandler+0x336>
            break;
 8001db2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dc2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2204      	movs	r2, #4
 8001dca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d008      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f872 	bl	8001ec8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f7ff ff8e 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff29 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a4:	f7ff ff3e 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 80020a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff ff8e 	bl	8001fd0 <NVIC_EncodePriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff5d 	bl	8001f7c <__NVIC_SetPriority>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff31 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffa2 	bl	8002038 <SysTick_Config>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b089      	sub	sp, #36	; 0x24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	e16b      	b.n	80023f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	f040 815a 	bne.w	80023ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d005      	beq.n	8002152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	2b02      	cmp	r3, #2
 8002150:	d130      	bne.n	80021b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002188:	2201      	movs	r2, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 0201 	and.w	r2, r3, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d017      	beq.n	80021f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d123      	bne.n	8002244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	08da      	lsrs	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3208      	adds	r2, #8
 8002204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0203 	and.w	r2, r3, #3
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80b4 	beq.w	80023ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b60      	ldr	r3, [pc, #384]	; (800240c <HAL_GPIO_Init+0x30c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	4a5f      	ldr	r2, [pc, #380]	; (800240c <HAL_GPIO_Init+0x30c>)
 8002290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002294:	6453      	str	r3, [r2, #68]	; 0x44
 8002296:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_GPIO_Init+0x30c>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	4a5b      	ldr	r2, [pc, #364]	; (8002410 <HAL_GPIO_Init+0x310>)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3302      	adds	r3, #2
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a52      	ldr	r2, [pc, #328]	; (8002414 <HAL_GPIO_Init+0x314>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02b      	beq.n	8002326 <HAL_GPIO_Init+0x226>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a51      	ldr	r2, [pc, #324]	; (8002418 <HAL_GPIO_Init+0x318>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d025      	beq.n	8002322 <HAL_GPIO_Init+0x222>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a50      	ldr	r2, [pc, #320]	; (800241c <HAL_GPIO_Init+0x31c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <HAL_GPIO_Init+0x21e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	; (8002420 <HAL_GPIO_Init+0x320>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d019      	beq.n	800231a <HAL_GPIO_Init+0x21a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <HAL_GPIO_Init+0x324>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0x216>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4d      	ldr	r2, [pc, #308]	; (8002428 <HAL_GPIO_Init+0x328>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_GPIO_Init+0x212>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4c      	ldr	r2, [pc, #304]	; (800242c <HAL_GPIO_Init+0x32c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x20e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4b      	ldr	r2, [pc, #300]	; (8002430 <HAL_GPIO_Init+0x330>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_GPIO_Init+0x20a>
 8002306:	2307      	movs	r3, #7
 8002308:	e00e      	b.n	8002328 <HAL_GPIO_Init+0x228>
 800230a:	2308      	movs	r3, #8
 800230c:	e00c      	b.n	8002328 <HAL_GPIO_Init+0x228>
 800230e:	2306      	movs	r3, #6
 8002310:	e00a      	b.n	8002328 <HAL_GPIO_Init+0x228>
 8002312:	2305      	movs	r3, #5
 8002314:	e008      	b.n	8002328 <HAL_GPIO_Init+0x228>
 8002316:	2304      	movs	r3, #4
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x228>
 800231a:	2303      	movs	r3, #3
 800231c:	e004      	b.n	8002328 <HAL_GPIO_Init+0x228>
 800231e:	2302      	movs	r3, #2
 8002320:	e002      	b.n	8002328 <HAL_GPIO_Init+0x228>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x228>
 8002326:	2300      	movs	r3, #0
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	f002 0203 	and.w	r2, r2, #3
 800232e:	0092      	lsls	r2, r2, #2
 8002330:	4093      	lsls	r3, r2
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002338:	4935      	ldr	r1, [pc, #212]	; (8002410 <HAL_GPIO_Init+0x310>)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	3302      	adds	r3, #2
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_GPIO_Init+0x334>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800236a:	4a32      	ldr	r2, [pc, #200]	; (8002434 <HAL_GPIO_Init+0x334>)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002370:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_GPIO_Init+0x334>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002394:	4a27      	ldr	r2, [pc, #156]	; (8002434 <HAL_GPIO_Init+0x334>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <HAL_GPIO_Init+0x334>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_GPIO_Init+0x334>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_GPIO_Init+0x334>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e8:	4a12      	ldr	r2, [pc, #72]	; (8002434 <HAL_GPIO_Init+0x334>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b0f      	cmp	r3, #15
 80023f8:	f67f ae90 	bls.w	800211c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3724      	adds	r7, #36	; 0x24
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	40013800 	.word	0x40013800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020400 	.word	0x40020400
 800241c:	40020800 	.word	0x40020800
 8002420:	40020c00 	.word	0x40020c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40021400 	.word	0x40021400
 800242c:	40021800 	.word	0x40021800
 8002430:	40021c00 	.word	0x40021c00
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800246a:	b480      	push	{r7}
 800246c:	b085      	sub	sp, #20
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4013      	ands	r3, r2
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43d9      	mvns	r1, r3
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	400b      	ands	r3, r1
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d006      	beq.n	80024c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024b6:	4a05      	ldr	r2, [pc, #20]	; (80024cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f960 	bl	8000784 <HAL_GPIO_EXTI_Callback>
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40013c00 	.word	0x40013c00

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e264      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d075      	beq.n	80025da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ee:	4ba3      	ldr	r3, [pc, #652]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d00c      	beq.n	8002514 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4ba0      	ldr	r3, [pc, #640]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d112      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b9d      	ldr	r3, [pc, #628]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002512:	d10b      	bne.n	800252c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002514:	4b99      	ldr	r3, [pc, #612]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05b      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d157      	bne.n	80025d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e23f      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d106      	bne.n	8002544 <HAL_RCC_OscConfig+0x74>
 8002536:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a90      	ldr	r2, [pc, #576]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x98>
 800254e:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a8a      	ldr	r2, [pc, #552]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b88      	ldr	r3, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a87      	ldr	r2, [pc, #540]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xb0>
 8002568:	4b84      	ldr	r3, [pc, #528]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a83      	ldr	r2, [pc, #524]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b81      	ldr	r3, [pc, #516]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a80      	ldr	r2, [pc, #512]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fe16 	bl	80011b8 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fe12 	bl	80011b8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e204      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xc0>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe02 	bl	80011b8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fdfe 	bl	80011b8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1f0      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0xe8>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b5f      	ldr	r3, [pc, #380]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b5c      	ldr	r3, [pc, #368]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1c4      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b56      	ldr	r3, [pc, #344]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4952      	ldr	r1, [pc, #328]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_OscConfig+0x2b0>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fdb7 	bl	80011b8 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fdb3 	bl	80011b8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1a5      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4940      	ldr	r1, [pc, #256]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <HAL_RCC_OscConfig+0x2b0>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002688:	f7fe fd96 	bl	80011b8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fd92 	bl	80011b8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e184      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d030      	beq.n	800271c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b30      	ldr	r3, [pc, #192]	; (8002784 <HAL_RCC_OscConfig+0x2b4>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fd76 	bl	80011b8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fd72 	bl	80011b8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e164      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x200>
 80026ee:	e015      	b.n	800271c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x2b4>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7fe fd5f 	bl	80011b8 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026fe:	f7fe fd5b 	bl	80011b8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e14d      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	4b1a      	ldr	r3, [pc, #104]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a0 	beq.w	800286a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 8002744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002748:	6413      	str	r3, [r2, #64]	; 0x40
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_RCC_OscConfig+0x2ac>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x2b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d121      	bne.n	80027aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <HAL_RCC_OscConfig+0x2b8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <HAL_RCC_OscConfig+0x2b8>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7fe fd21 	bl	80011b8 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e011      	b.n	800279e <HAL_RCC_OscConfig+0x2ce>
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	42470000 	.word	0x42470000
 8002784:	42470e80 	.word	0x42470e80
 8002788:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278c:	f7fe fd14 	bl	80011b8 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e106      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b85      	ldr	r3, [pc, #532]	; (80029b4 <HAL_RCC_OscConfig+0x4e4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d106      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2f0>
 80027b2:	4b81      	ldr	r3, [pc, #516]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a80      	ldr	r2, [pc, #512]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	e01c      	b.n	80027fa <HAL_RCC_OscConfig+0x32a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b05      	cmp	r3, #5
 80027c6:	d10c      	bne.n	80027e2 <HAL_RCC_OscConfig+0x312>
 80027c8:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a7a      	ldr	r2, [pc, #488]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	4b78      	ldr	r3, [pc, #480]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a77      	ldr	r2, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	e00b      	b.n	80027fa <HAL_RCC_OscConfig+0x32a>
 80027e2:	4b75      	ldr	r3, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	4a74      	ldr	r2, [pc, #464]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
 80027ee:	4b72      	ldr	r3, [pc, #456]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a71      	ldr	r2, [pc, #452]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d015      	beq.n	800282e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fcd9 	bl	80011b8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fcd5 	bl	80011b8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	f241 3288 	movw	r2, #5000	; 0x1388
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e0c5      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	4b65      	ldr	r3, [pc, #404]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0ee      	beq.n	800280a <HAL_RCC_OscConfig+0x33a>
 800282c:	e014      	b.n	8002858 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7fe fcc3 	bl	80011b8 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fcbf 	bl	80011b8 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0af      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800284c:	4b5a      	ldr	r3, [pc, #360]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ee      	bne.n	8002836 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	4a55      	ldr	r2, [pc, #340]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002868:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 809b 	beq.w	80029aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d05c      	beq.n	800293a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d141      	bne.n	800290c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b4c      	ldr	r3, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x4ec>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe fc93 	bl	80011b8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fc8f 	bl	80011b8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e081      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a8:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f0      	bne.n	8002896 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	085b      	lsrs	r3, r3, #1
 80028cc:	3b01      	subs	r3, #1
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d6:	061b      	lsls	r3, r3, #24
 80028d8:	4937      	ldr	r1, [pc, #220]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028de:	4b37      	ldr	r3, [pc, #220]	; (80029bc <HAL_RCC_OscConfig+0x4ec>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fc68 	bl	80011b8 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fc64 	bl	80011b8 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e056      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x41c>
 800290a:	e04e      	b.n	80029aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x4ec>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe fc51 	bl	80011b8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fc4d 	bl	80011b8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e03f      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x44a>
 8002938:	e037      	b.n	80029aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e032      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002946:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_RCC_OscConfig+0x4e8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d028      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d121      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d11a      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002976:	4013      	ands	r3, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800297c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800297e:	4293      	cmp	r3, r2
 8002980:	d111      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40007000 	.word	0x40007000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	42470060 	.word	0x42470060

080029c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0cc      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d90c      	bls.n	80029fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b63      	ldr	r3, [pc, #396]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0b8      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a2c:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	494d      	ldr	r1, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d044      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d119      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e07f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d003      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d107      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e067      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f023 0203 	bic.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4934      	ldr	r1, [pc, #208]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fb82 	bl	80011b8 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	e00a      	b.n	8002ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab8:	f7fe fb7e 	bl	80011b8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e04f      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 020c 	and.w	r2, r3, #12
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d1eb      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b25      	ldr	r3, [pc, #148]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d20c      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e032      	b.n	8002b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b14:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4916      	ldr	r1, [pc, #88]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b46:	f000 f821 	bl	8002b8c <HAL_RCC_GetSysClockFreq>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	490a      	ldr	r1, [pc, #40]	; (8002b80 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	5ccb      	ldrb	r3, [r1, r3]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fae2 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023c00 	.word	0x40023c00
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	08003dd0 	.word	0x08003dd0
 8002b84:	20000004 	.word	0x20000004
 8002b88:	20000008 	.word	0x20000008

08002b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ba4:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d00d      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x40>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	f200 80bd 	bhi.w	8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bbe:	e0b7      	b.n	8002d30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bc2:	60bb      	str	r3, [r7, #8]
       break;
 8002bc4:	e0b7      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bc6:	4b61      	ldr	r3, [pc, #388]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002bc8:	60bb      	str	r3, [r7, #8]
      break;
 8002bca:	e0b4      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bcc:	4b5d      	ldr	r3, [pc, #372]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bd6:	4b5b      	ldr	r3, [pc, #364]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d04d      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	461a      	mov	r2, r3
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	ea02 0800 	and.w	r8, r2, r0
 8002bfa:	ea03 0901 	and.w	r9, r3, r1
 8002bfe:	4640      	mov	r0, r8
 8002c00:	4649      	mov	r1, r9
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	014b      	lsls	r3, r1, #5
 8002c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c10:	0142      	lsls	r2, r0, #5
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	ebb0 0008 	subs.w	r0, r0, r8
 8002c1a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	018b      	lsls	r3, r1, #6
 8002c28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c2c:	0182      	lsls	r2, r0, #6
 8002c2e:	1a12      	subs	r2, r2, r0
 8002c30:	eb63 0301 	sbc.w	r3, r3, r1
 8002c34:	f04f 0000 	mov.w	r0, #0
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	00d9      	lsls	r1, r3, #3
 8002c3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c42:	00d0      	lsls	r0, r2, #3
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	eb12 0208 	adds.w	r2, r2, r8
 8002c4c:	eb43 0309 	adc.w	r3, r3, r9
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	0259      	lsls	r1, r3, #9
 8002c5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c5e:	0250      	lsls	r0, r2, #9
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	f7fd fafe 	bl	8000270 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e04a      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	461a      	mov	r2, r3
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	ea02 0400 	and.w	r4, r2, r0
 8002c96:	ea03 0501 	and.w	r5, r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	014b      	lsls	r3, r1, #5
 8002ca8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cac:	0142      	lsls	r2, r0, #5
 8002cae:	4610      	mov	r0, r2
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	1b00      	subs	r0, r0, r4
 8002cb4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	018b      	lsls	r3, r1, #6
 8002cc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cc6:	0182      	lsls	r2, r0, #6
 8002cc8:	1a12      	subs	r2, r2, r0
 8002cca:	eb63 0301 	sbc.w	r3, r3, r1
 8002cce:	f04f 0000 	mov.w	r0, #0
 8002cd2:	f04f 0100 	mov.w	r1, #0
 8002cd6:	00d9      	lsls	r1, r3, #3
 8002cd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cdc:	00d0      	lsls	r0, r2, #3
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	1912      	adds	r2, r2, r4
 8002ce4:	eb45 0303 	adc.w	r3, r5, r3
 8002ce8:	f04f 0000 	mov.w	r0, #0
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	0299      	lsls	r1, r3, #10
 8002cf2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cf6:	0290      	lsls	r0, r2, #10
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	f7fd fab2 	bl	8000270 <__aeabi_uldivmod>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	460b      	mov	r3, r1
 8002d10:	4613      	mov	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	0c1b      	lsrs	r3, r3, #16
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	60bb      	str	r3, [r7, #8]
      break;
 8002d2e:	e002      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d32:	60bb      	str	r3, [r7, #8]
      break;
 8002d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d36:	68bb      	ldr	r3, [r7, #8]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200

08002d50 <__errno>:
 8002d50:	4b01      	ldr	r3, [pc, #4]	; (8002d58 <__errno+0x8>)
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000010 	.word	0x20000010

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4d0d      	ldr	r5, [pc, #52]	; (8002d94 <__libc_init_array+0x38>)
 8002d60:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	2600      	movs	r6, #0
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	4d0b      	ldr	r5, [pc, #44]	; (8002d9c <__libc_init_array+0x40>)
 8002d6e:	4c0c      	ldr	r4, [pc, #48]	; (8002da0 <__libc_init_array+0x44>)
 8002d70:	f001 f822 	bl	8003db8 <_init>
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	2600      	movs	r6, #0
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08003f34 	.word	0x08003f34
 8002d98:	08003f34 	.word	0x08003f34
 8002d9c:	08003f34 	.word	0x08003f34
 8002da0:	08003f38 	.word	0x08003f38

08002da4 <memset>:
 8002da4:	4402      	add	r2, r0
 8002da6:	4603      	mov	r3, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <rand>:
 8002db4:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <rand+0x60>)
 8002db6:	b510      	push	{r4, lr}
 8002db8:	681c      	ldr	r4, [r3, #0]
 8002dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dbc:	b9b3      	cbnz	r3, 8002dec <rand+0x38>
 8002dbe:	2018      	movs	r0, #24
 8002dc0:	f000 f868 	bl	8002e94 <malloc>
 8002dc4:	63a0      	str	r0, [r4, #56]	; 0x38
 8002dc6:	b928      	cbnz	r0, 8002dd4 <rand+0x20>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <rand+0x64>)
 8002dcc:	4813      	ldr	r0, [pc, #76]	; (8002e1c <rand+0x68>)
 8002dce:	214e      	movs	r1, #78	; 0x4e
 8002dd0:	f000 f830 	bl	8002e34 <__assert_func>
 8002dd4:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <rand+0x6c>)
 8002dd6:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <rand+0x70>)
 8002dd8:	e9c0 2300 	strd	r2, r3, [r0]
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <rand+0x74>)
 8002dde:	6083      	str	r3, [r0, #8]
 8002de0:	230b      	movs	r3, #11
 8002de2:	8183      	strh	r3, [r0, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	2300      	movs	r3, #0
 8002de8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002dec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002dee:	480f      	ldr	r0, [pc, #60]	; (8002e2c <rand+0x78>)
 8002df0:	690a      	ldr	r2, [r1, #16]
 8002df2:	694b      	ldr	r3, [r1, #20]
 8002df4:	4c0e      	ldr	r4, [pc, #56]	; (8002e30 <rand+0x7c>)
 8002df6:	4350      	muls	r0, r2
 8002df8:	fb04 0003 	mla	r0, r4, r3, r0
 8002dfc:	fba2 3404 	umull	r3, r4, r2, r4
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	4404      	add	r4, r0
 8002e04:	f144 0000 	adc.w	r0, r4, #0
 8002e08:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8002e0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	bf00      	nop
 8002e14:	20000010 	.word	0x20000010
 8002e18:	08003de4 	.word	0x08003de4
 8002e1c:	08003dfb 	.word	0x08003dfb
 8002e20:	abcd330e 	.word	0xabcd330e
 8002e24:	e66d1234 	.word	0xe66d1234
 8002e28:	0005deec 	.word	0x0005deec
 8002e2c:	5851f42d 	.word	0x5851f42d
 8002e30:	4c957f2d 	.word	0x4c957f2d

08002e34 <__assert_func>:
 8002e34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e36:	4614      	mov	r4, r2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <__assert_func+0x2c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4605      	mov	r5, r0
 8002e40:	68d8      	ldr	r0, [r3, #12]
 8002e42:	b14c      	cbz	r4, 8002e58 <__assert_func+0x24>
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <__assert_func+0x30>)
 8002e46:	9100      	str	r1, [sp, #0]
 8002e48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002e4c:	4906      	ldr	r1, [pc, #24]	; (8002e68 <__assert_func+0x34>)
 8002e4e:	462b      	mov	r3, r5
 8002e50:	f000 f80e 	bl	8002e70 <fiprintf>
 8002e54:	f000 fc8e 	bl	8003774 <abort>
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <__assert_func+0x38>)
 8002e5a:	461c      	mov	r4, r3
 8002e5c:	e7f3      	b.n	8002e46 <__assert_func+0x12>
 8002e5e:	bf00      	nop
 8002e60:	20000010 	.word	0x20000010
 8002e64:	08003e5a 	.word	0x08003e5a
 8002e68:	08003e67 	.word	0x08003e67
 8002e6c:	08003e95 	.word	0x08003e95

08002e70 <fiprintf>:
 8002e70:	b40e      	push	{r1, r2, r3}
 8002e72:	b503      	push	{r0, r1, lr}
 8002e74:	4601      	mov	r1, r0
 8002e76:	ab03      	add	r3, sp, #12
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <fiprintf+0x20>)
 8002e7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e7e:	6800      	ldr	r0, [r0, #0]
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	f000 f8e3 	bl	800304c <_vfiprintf_r>
 8002e86:	b002      	add	sp, #8
 8002e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e8c:	b003      	add	sp, #12
 8002e8e:	4770      	bx	lr
 8002e90:	20000010 	.word	0x20000010

08002e94 <malloc>:
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <malloc+0xc>)
 8002e96:	4601      	mov	r1, r0
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	f000 b853 	b.w	8002f44 <_malloc_r>
 8002e9e:	bf00      	nop
 8002ea0:	20000010 	.word	0x20000010

08002ea4 <_free_r>:
 8002ea4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ea6:	2900      	cmp	r1, #0
 8002ea8:	d048      	beq.n	8002f3c <_free_r+0x98>
 8002eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eae:	9001      	str	r0, [sp, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f1a1 0404 	sub.w	r4, r1, #4
 8002eb6:	bfb8      	it	lt
 8002eb8:	18e4      	addlt	r4, r4, r3
 8002eba:	f000 fe81 	bl	8003bc0 <__malloc_lock>
 8002ebe:	4a20      	ldr	r2, [pc, #128]	; (8002f40 <_free_r+0x9c>)
 8002ec0:	9801      	ldr	r0, [sp, #4]
 8002ec2:	6813      	ldr	r3, [r2, #0]
 8002ec4:	4615      	mov	r5, r2
 8002ec6:	b933      	cbnz	r3, 8002ed6 <_free_r+0x32>
 8002ec8:	6063      	str	r3, [r4, #4]
 8002eca:	6014      	str	r4, [r2, #0]
 8002ecc:	b003      	add	sp, #12
 8002ece:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ed2:	f000 be7b 	b.w	8003bcc <__malloc_unlock>
 8002ed6:	42a3      	cmp	r3, r4
 8002ed8:	d90b      	bls.n	8002ef2 <_free_r+0x4e>
 8002eda:	6821      	ldr	r1, [r4, #0]
 8002edc:	1862      	adds	r2, r4, r1
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	bf04      	itt	eq
 8002ee2:	681a      	ldreq	r2, [r3, #0]
 8002ee4:	685b      	ldreq	r3, [r3, #4]
 8002ee6:	6063      	str	r3, [r4, #4]
 8002ee8:	bf04      	itt	eq
 8002eea:	1852      	addeq	r2, r2, r1
 8002eec:	6022      	streq	r2, [r4, #0]
 8002eee:	602c      	str	r4, [r5, #0]
 8002ef0:	e7ec      	b.n	8002ecc <_free_r+0x28>
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	b10b      	cbz	r3, 8002efc <_free_r+0x58>
 8002ef8:	42a3      	cmp	r3, r4
 8002efa:	d9fa      	bls.n	8002ef2 <_free_r+0x4e>
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	1855      	adds	r5, r2, r1
 8002f00:	42a5      	cmp	r5, r4
 8002f02:	d10b      	bne.n	8002f1c <_free_r+0x78>
 8002f04:	6824      	ldr	r4, [r4, #0]
 8002f06:	4421      	add	r1, r4
 8002f08:	1854      	adds	r4, r2, r1
 8002f0a:	42a3      	cmp	r3, r4
 8002f0c:	6011      	str	r1, [r2, #0]
 8002f0e:	d1dd      	bne.n	8002ecc <_free_r+0x28>
 8002f10:	681c      	ldr	r4, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	6053      	str	r3, [r2, #4]
 8002f16:	4421      	add	r1, r4
 8002f18:	6011      	str	r1, [r2, #0]
 8002f1a:	e7d7      	b.n	8002ecc <_free_r+0x28>
 8002f1c:	d902      	bls.n	8002f24 <_free_r+0x80>
 8002f1e:	230c      	movs	r3, #12
 8002f20:	6003      	str	r3, [r0, #0]
 8002f22:	e7d3      	b.n	8002ecc <_free_r+0x28>
 8002f24:	6825      	ldr	r5, [r4, #0]
 8002f26:	1961      	adds	r1, r4, r5
 8002f28:	428b      	cmp	r3, r1
 8002f2a:	bf04      	itt	eq
 8002f2c:	6819      	ldreq	r1, [r3, #0]
 8002f2e:	685b      	ldreq	r3, [r3, #4]
 8002f30:	6063      	str	r3, [r4, #4]
 8002f32:	bf04      	itt	eq
 8002f34:	1949      	addeq	r1, r1, r5
 8002f36:	6021      	streq	r1, [r4, #0]
 8002f38:	6054      	str	r4, [r2, #4]
 8002f3a:	e7c7      	b.n	8002ecc <_free_r+0x28>
 8002f3c:	b003      	add	sp, #12
 8002f3e:	bd30      	pop	{r4, r5, pc}
 8002f40:	2000009c 	.word	0x2000009c

08002f44 <_malloc_r>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	1ccd      	adds	r5, r1, #3
 8002f48:	f025 0503 	bic.w	r5, r5, #3
 8002f4c:	3508      	adds	r5, #8
 8002f4e:	2d0c      	cmp	r5, #12
 8002f50:	bf38      	it	cc
 8002f52:	250c      	movcc	r5, #12
 8002f54:	2d00      	cmp	r5, #0
 8002f56:	4606      	mov	r6, r0
 8002f58:	db01      	blt.n	8002f5e <_malloc_r+0x1a>
 8002f5a:	42a9      	cmp	r1, r5
 8002f5c:	d903      	bls.n	8002f66 <_malloc_r+0x22>
 8002f5e:	230c      	movs	r3, #12
 8002f60:	6033      	str	r3, [r6, #0]
 8002f62:	2000      	movs	r0, #0
 8002f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f66:	f000 fe2b 	bl	8003bc0 <__malloc_lock>
 8002f6a:	4921      	ldr	r1, [pc, #132]	; (8002ff0 <_malloc_r+0xac>)
 8002f6c:	680a      	ldr	r2, [r1, #0]
 8002f6e:	4614      	mov	r4, r2
 8002f70:	b99c      	cbnz	r4, 8002f9a <_malloc_r+0x56>
 8002f72:	4f20      	ldr	r7, [pc, #128]	; (8002ff4 <_malloc_r+0xb0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b923      	cbnz	r3, 8002f82 <_malloc_r+0x3e>
 8002f78:	4621      	mov	r1, r4
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	f000 fb2a 	bl	80035d4 <_sbrk_r>
 8002f80:	6038      	str	r0, [r7, #0]
 8002f82:	4629      	mov	r1, r5
 8002f84:	4630      	mov	r0, r6
 8002f86:	f000 fb25 	bl	80035d4 <_sbrk_r>
 8002f8a:	1c43      	adds	r3, r0, #1
 8002f8c:	d123      	bne.n	8002fd6 <_malloc_r+0x92>
 8002f8e:	230c      	movs	r3, #12
 8002f90:	6033      	str	r3, [r6, #0]
 8002f92:	4630      	mov	r0, r6
 8002f94:	f000 fe1a 	bl	8003bcc <__malloc_unlock>
 8002f98:	e7e3      	b.n	8002f62 <_malloc_r+0x1e>
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	1b5b      	subs	r3, r3, r5
 8002f9e:	d417      	bmi.n	8002fd0 <_malloc_r+0x8c>
 8002fa0:	2b0b      	cmp	r3, #11
 8002fa2:	d903      	bls.n	8002fac <_malloc_r+0x68>
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	441c      	add	r4, r3
 8002fa8:	6025      	str	r5, [r4, #0]
 8002faa:	e004      	b.n	8002fb6 <_malloc_r+0x72>
 8002fac:	6863      	ldr	r3, [r4, #4]
 8002fae:	42a2      	cmp	r2, r4
 8002fb0:	bf0c      	ite	eq
 8002fb2:	600b      	streq	r3, [r1, #0]
 8002fb4:	6053      	strne	r3, [r2, #4]
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f000 fe08 	bl	8003bcc <__malloc_unlock>
 8002fbc:	f104 000b 	add.w	r0, r4, #11
 8002fc0:	1d23      	adds	r3, r4, #4
 8002fc2:	f020 0007 	bic.w	r0, r0, #7
 8002fc6:	1ac2      	subs	r2, r0, r3
 8002fc8:	d0cc      	beq.n	8002f64 <_malloc_r+0x20>
 8002fca:	1a1b      	subs	r3, r3, r0
 8002fcc:	50a3      	str	r3, [r4, r2]
 8002fce:	e7c9      	b.n	8002f64 <_malloc_r+0x20>
 8002fd0:	4622      	mov	r2, r4
 8002fd2:	6864      	ldr	r4, [r4, #4]
 8002fd4:	e7cc      	b.n	8002f70 <_malloc_r+0x2c>
 8002fd6:	1cc4      	adds	r4, r0, #3
 8002fd8:	f024 0403 	bic.w	r4, r4, #3
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d0e3      	beq.n	8002fa8 <_malloc_r+0x64>
 8002fe0:	1a21      	subs	r1, r4, r0
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f000 faf6 	bl	80035d4 <_sbrk_r>
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d1dd      	bne.n	8002fa8 <_malloc_r+0x64>
 8002fec:	e7cf      	b.n	8002f8e <_malloc_r+0x4a>
 8002fee:	bf00      	nop
 8002ff0:	2000009c 	.word	0x2000009c
 8002ff4:	200000a0 	.word	0x200000a0

08002ff8 <__sfputc_r>:
 8002ff8:	6893      	ldr	r3, [r2, #8]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	b410      	push	{r4}
 8003000:	6093      	str	r3, [r2, #8]
 8003002:	da08      	bge.n	8003016 <__sfputc_r+0x1e>
 8003004:	6994      	ldr	r4, [r2, #24]
 8003006:	42a3      	cmp	r3, r4
 8003008:	db01      	blt.n	800300e <__sfputc_r+0x16>
 800300a:	290a      	cmp	r1, #10
 800300c:	d103      	bne.n	8003016 <__sfputc_r+0x1e>
 800300e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003012:	f000 baef 	b.w	80035f4 <__swbuf_r>
 8003016:	6813      	ldr	r3, [r2, #0]
 8003018:	1c58      	adds	r0, r3, #1
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	7019      	strb	r1, [r3, #0]
 800301e:	4608      	mov	r0, r1
 8003020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003024:	4770      	bx	lr

08003026 <__sfputs_r>:
 8003026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003028:	4606      	mov	r6, r0
 800302a:	460f      	mov	r7, r1
 800302c:	4614      	mov	r4, r2
 800302e:	18d5      	adds	r5, r2, r3
 8003030:	42ac      	cmp	r4, r5
 8003032:	d101      	bne.n	8003038 <__sfputs_r+0x12>
 8003034:	2000      	movs	r0, #0
 8003036:	e007      	b.n	8003048 <__sfputs_r+0x22>
 8003038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800303c:	463a      	mov	r2, r7
 800303e:	4630      	mov	r0, r6
 8003040:	f7ff ffda 	bl	8002ff8 <__sfputc_r>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d1f3      	bne.n	8003030 <__sfputs_r+0xa>
 8003048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800304c <_vfiprintf_r>:
 800304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003050:	460d      	mov	r5, r1
 8003052:	b09d      	sub	sp, #116	; 0x74
 8003054:	4614      	mov	r4, r2
 8003056:	4698      	mov	r8, r3
 8003058:	4606      	mov	r6, r0
 800305a:	b118      	cbz	r0, 8003064 <_vfiprintf_r+0x18>
 800305c:	6983      	ldr	r3, [r0, #24]
 800305e:	b90b      	cbnz	r3, 8003064 <_vfiprintf_r+0x18>
 8003060:	f000 fcaa 	bl	80039b8 <__sinit>
 8003064:	4b89      	ldr	r3, [pc, #548]	; (800328c <_vfiprintf_r+0x240>)
 8003066:	429d      	cmp	r5, r3
 8003068:	d11b      	bne.n	80030a2 <_vfiprintf_r+0x56>
 800306a:	6875      	ldr	r5, [r6, #4]
 800306c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800306e:	07d9      	lsls	r1, r3, #31
 8003070:	d405      	bmi.n	800307e <_vfiprintf_r+0x32>
 8003072:	89ab      	ldrh	r3, [r5, #12]
 8003074:	059a      	lsls	r2, r3, #22
 8003076:	d402      	bmi.n	800307e <_vfiprintf_r+0x32>
 8003078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800307a:	f000 fd3b 	bl	8003af4 <__retarget_lock_acquire_recursive>
 800307e:	89ab      	ldrh	r3, [r5, #12]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	d501      	bpl.n	8003088 <_vfiprintf_r+0x3c>
 8003084:	692b      	ldr	r3, [r5, #16]
 8003086:	b9eb      	cbnz	r3, 80030c4 <_vfiprintf_r+0x78>
 8003088:	4629      	mov	r1, r5
 800308a:	4630      	mov	r0, r6
 800308c:	f000 fb04 	bl	8003698 <__swsetup_r>
 8003090:	b1c0      	cbz	r0, 80030c4 <_vfiprintf_r+0x78>
 8003092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003094:	07dc      	lsls	r4, r3, #31
 8003096:	d50e      	bpl.n	80030b6 <_vfiprintf_r+0x6a>
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	b01d      	add	sp, #116	; 0x74
 800309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a2:	4b7b      	ldr	r3, [pc, #492]	; (8003290 <_vfiprintf_r+0x244>)
 80030a4:	429d      	cmp	r5, r3
 80030a6:	d101      	bne.n	80030ac <_vfiprintf_r+0x60>
 80030a8:	68b5      	ldr	r5, [r6, #8]
 80030aa:	e7df      	b.n	800306c <_vfiprintf_r+0x20>
 80030ac:	4b79      	ldr	r3, [pc, #484]	; (8003294 <_vfiprintf_r+0x248>)
 80030ae:	429d      	cmp	r5, r3
 80030b0:	bf08      	it	eq
 80030b2:	68f5      	ldreq	r5, [r6, #12]
 80030b4:	e7da      	b.n	800306c <_vfiprintf_r+0x20>
 80030b6:	89ab      	ldrh	r3, [r5, #12]
 80030b8:	0598      	lsls	r0, r3, #22
 80030ba:	d4ed      	bmi.n	8003098 <_vfiprintf_r+0x4c>
 80030bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030be:	f000 fd1a 	bl	8003af6 <__retarget_lock_release_recursive>
 80030c2:	e7e9      	b.n	8003098 <_vfiprintf_r+0x4c>
 80030c4:	2300      	movs	r3, #0
 80030c6:	9309      	str	r3, [sp, #36]	; 0x24
 80030c8:	2320      	movs	r3, #32
 80030ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80030d2:	2330      	movs	r3, #48	; 0x30
 80030d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003298 <_vfiprintf_r+0x24c>
 80030d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030dc:	f04f 0901 	mov.w	r9, #1
 80030e0:	4623      	mov	r3, r4
 80030e2:	469a      	mov	sl, r3
 80030e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030e8:	b10a      	cbz	r2, 80030ee <_vfiprintf_r+0xa2>
 80030ea:	2a25      	cmp	r2, #37	; 0x25
 80030ec:	d1f9      	bne.n	80030e2 <_vfiprintf_r+0x96>
 80030ee:	ebba 0b04 	subs.w	fp, sl, r4
 80030f2:	d00b      	beq.n	800310c <_vfiprintf_r+0xc0>
 80030f4:	465b      	mov	r3, fp
 80030f6:	4622      	mov	r2, r4
 80030f8:	4629      	mov	r1, r5
 80030fa:	4630      	mov	r0, r6
 80030fc:	f7ff ff93 	bl	8003026 <__sfputs_r>
 8003100:	3001      	adds	r0, #1
 8003102:	f000 80aa 	beq.w	800325a <_vfiprintf_r+0x20e>
 8003106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003108:	445a      	add	r2, fp
 800310a:	9209      	str	r2, [sp, #36]	; 0x24
 800310c:	f89a 3000 	ldrb.w	r3, [sl]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80a2 	beq.w	800325a <_vfiprintf_r+0x20e>
 8003116:	2300      	movs	r3, #0
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003120:	f10a 0a01 	add.w	sl, sl, #1
 8003124:	9304      	str	r3, [sp, #16]
 8003126:	9307      	str	r3, [sp, #28]
 8003128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800312c:	931a      	str	r3, [sp, #104]	; 0x68
 800312e:	4654      	mov	r4, sl
 8003130:	2205      	movs	r2, #5
 8003132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003136:	4858      	ldr	r0, [pc, #352]	; (8003298 <_vfiprintf_r+0x24c>)
 8003138:	f7fd f84a 	bl	80001d0 <memchr>
 800313c:	9a04      	ldr	r2, [sp, #16]
 800313e:	b9d8      	cbnz	r0, 8003178 <_vfiprintf_r+0x12c>
 8003140:	06d1      	lsls	r1, r2, #27
 8003142:	bf44      	itt	mi
 8003144:	2320      	movmi	r3, #32
 8003146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800314a:	0713      	lsls	r3, r2, #28
 800314c:	bf44      	itt	mi
 800314e:	232b      	movmi	r3, #43	; 0x2b
 8003150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003154:	f89a 3000 	ldrb.w	r3, [sl]
 8003158:	2b2a      	cmp	r3, #42	; 0x2a
 800315a:	d015      	beq.n	8003188 <_vfiprintf_r+0x13c>
 800315c:	9a07      	ldr	r2, [sp, #28]
 800315e:	4654      	mov	r4, sl
 8003160:	2000      	movs	r0, #0
 8003162:	f04f 0c0a 	mov.w	ip, #10
 8003166:	4621      	mov	r1, r4
 8003168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800316c:	3b30      	subs	r3, #48	; 0x30
 800316e:	2b09      	cmp	r3, #9
 8003170:	d94e      	bls.n	8003210 <_vfiprintf_r+0x1c4>
 8003172:	b1b0      	cbz	r0, 80031a2 <_vfiprintf_r+0x156>
 8003174:	9207      	str	r2, [sp, #28]
 8003176:	e014      	b.n	80031a2 <_vfiprintf_r+0x156>
 8003178:	eba0 0308 	sub.w	r3, r0, r8
 800317c:	fa09 f303 	lsl.w	r3, r9, r3
 8003180:	4313      	orrs	r3, r2
 8003182:	9304      	str	r3, [sp, #16]
 8003184:	46a2      	mov	sl, r4
 8003186:	e7d2      	b.n	800312e <_vfiprintf_r+0xe2>
 8003188:	9b03      	ldr	r3, [sp, #12]
 800318a:	1d19      	adds	r1, r3, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	9103      	str	r1, [sp, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	bfbb      	ittet	lt
 8003194:	425b      	neglt	r3, r3
 8003196:	f042 0202 	orrlt.w	r2, r2, #2
 800319a:	9307      	strge	r3, [sp, #28]
 800319c:	9307      	strlt	r3, [sp, #28]
 800319e:	bfb8      	it	lt
 80031a0:	9204      	strlt	r2, [sp, #16]
 80031a2:	7823      	ldrb	r3, [r4, #0]
 80031a4:	2b2e      	cmp	r3, #46	; 0x2e
 80031a6:	d10c      	bne.n	80031c2 <_vfiprintf_r+0x176>
 80031a8:	7863      	ldrb	r3, [r4, #1]
 80031aa:	2b2a      	cmp	r3, #42	; 0x2a
 80031ac:	d135      	bne.n	800321a <_vfiprintf_r+0x1ce>
 80031ae:	9b03      	ldr	r3, [sp, #12]
 80031b0:	1d1a      	adds	r2, r3, #4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	9203      	str	r2, [sp, #12]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bfb8      	it	lt
 80031ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80031be:	3402      	adds	r4, #2
 80031c0:	9305      	str	r3, [sp, #20]
 80031c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80032a8 <_vfiprintf_r+0x25c>
 80031c6:	7821      	ldrb	r1, [r4, #0]
 80031c8:	2203      	movs	r2, #3
 80031ca:	4650      	mov	r0, sl
 80031cc:	f7fd f800 	bl	80001d0 <memchr>
 80031d0:	b140      	cbz	r0, 80031e4 <_vfiprintf_r+0x198>
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	eba0 000a 	sub.w	r0, r0, sl
 80031d8:	fa03 f000 	lsl.w	r0, r3, r0
 80031dc:	9b04      	ldr	r3, [sp, #16]
 80031de:	4303      	orrs	r3, r0
 80031e0:	3401      	adds	r4, #1
 80031e2:	9304      	str	r3, [sp, #16]
 80031e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e8:	482c      	ldr	r0, [pc, #176]	; (800329c <_vfiprintf_r+0x250>)
 80031ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031ee:	2206      	movs	r2, #6
 80031f0:	f7fc ffee 	bl	80001d0 <memchr>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	d03f      	beq.n	8003278 <_vfiprintf_r+0x22c>
 80031f8:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <_vfiprintf_r+0x254>)
 80031fa:	bb1b      	cbnz	r3, 8003244 <_vfiprintf_r+0x1f8>
 80031fc:	9b03      	ldr	r3, [sp, #12]
 80031fe:	3307      	adds	r3, #7
 8003200:	f023 0307 	bic.w	r3, r3, #7
 8003204:	3308      	adds	r3, #8
 8003206:	9303      	str	r3, [sp, #12]
 8003208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800320a:	443b      	add	r3, r7
 800320c:	9309      	str	r3, [sp, #36]	; 0x24
 800320e:	e767      	b.n	80030e0 <_vfiprintf_r+0x94>
 8003210:	fb0c 3202 	mla	r2, ip, r2, r3
 8003214:	460c      	mov	r4, r1
 8003216:	2001      	movs	r0, #1
 8003218:	e7a5      	b.n	8003166 <_vfiprintf_r+0x11a>
 800321a:	2300      	movs	r3, #0
 800321c:	3401      	adds	r4, #1
 800321e:	9305      	str	r3, [sp, #20]
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 0c0a 	mov.w	ip, #10
 8003226:	4620      	mov	r0, r4
 8003228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800322c:	3a30      	subs	r2, #48	; 0x30
 800322e:	2a09      	cmp	r2, #9
 8003230:	d903      	bls.n	800323a <_vfiprintf_r+0x1ee>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0c5      	beq.n	80031c2 <_vfiprintf_r+0x176>
 8003236:	9105      	str	r1, [sp, #20]
 8003238:	e7c3      	b.n	80031c2 <_vfiprintf_r+0x176>
 800323a:	fb0c 2101 	mla	r1, ip, r1, r2
 800323e:	4604      	mov	r4, r0
 8003240:	2301      	movs	r3, #1
 8003242:	e7f0      	b.n	8003226 <_vfiprintf_r+0x1da>
 8003244:	ab03      	add	r3, sp, #12
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	462a      	mov	r2, r5
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <_vfiprintf_r+0x258>)
 800324c:	a904      	add	r1, sp, #16
 800324e:	4630      	mov	r0, r6
 8003250:	f3af 8000 	nop.w
 8003254:	4607      	mov	r7, r0
 8003256:	1c78      	adds	r0, r7, #1
 8003258:	d1d6      	bne.n	8003208 <_vfiprintf_r+0x1bc>
 800325a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800325c:	07d9      	lsls	r1, r3, #31
 800325e:	d405      	bmi.n	800326c <_vfiprintf_r+0x220>
 8003260:	89ab      	ldrh	r3, [r5, #12]
 8003262:	059a      	lsls	r2, r3, #22
 8003264:	d402      	bmi.n	800326c <_vfiprintf_r+0x220>
 8003266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003268:	f000 fc45 	bl	8003af6 <__retarget_lock_release_recursive>
 800326c:	89ab      	ldrh	r3, [r5, #12]
 800326e:	065b      	lsls	r3, r3, #25
 8003270:	f53f af12 	bmi.w	8003098 <_vfiprintf_r+0x4c>
 8003274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003276:	e711      	b.n	800309c <_vfiprintf_r+0x50>
 8003278:	ab03      	add	r3, sp, #12
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	462a      	mov	r2, r5
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <_vfiprintf_r+0x258>)
 8003280:	a904      	add	r1, sp, #16
 8003282:	4630      	mov	r0, r6
 8003284:	f000 f880 	bl	8003388 <_printf_i>
 8003288:	e7e4      	b.n	8003254 <_vfiprintf_r+0x208>
 800328a:	bf00      	nop
 800328c:	08003eec 	.word	0x08003eec
 8003290:	08003f0c 	.word	0x08003f0c
 8003294:	08003ecc 	.word	0x08003ecc
 8003298:	08003e96 	.word	0x08003e96
 800329c:	08003ea0 	.word	0x08003ea0
 80032a0:	00000000 	.word	0x00000000
 80032a4:	08003027 	.word	0x08003027
 80032a8:	08003e9c 	.word	0x08003e9c

080032ac <_printf_common>:
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	4616      	mov	r6, r2
 80032b2:	4699      	mov	r9, r3
 80032b4:	688a      	ldr	r2, [r1, #8]
 80032b6:	690b      	ldr	r3, [r1, #16]
 80032b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032bc:	4293      	cmp	r3, r2
 80032be:	bfb8      	it	lt
 80032c0:	4613      	movlt	r3, r2
 80032c2:	6033      	str	r3, [r6, #0]
 80032c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032c8:	4607      	mov	r7, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	b10a      	cbz	r2, 80032d2 <_printf_common+0x26>
 80032ce:	3301      	adds	r3, #1
 80032d0:	6033      	str	r3, [r6, #0]
 80032d2:	6823      	ldr	r3, [r4, #0]
 80032d4:	0699      	lsls	r1, r3, #26
 80032d6:	bf42      	ittt	mi
 80032d8:	6833      	ldrmi	r3, [r6, #0]
 80032da:	3302      	addmi	r3, #2
 80032dc:	6033      	strmi	r3, [r6, #0]
 80032de:	6825      	ldr	r5, [r4, #0]
 80032e0:	f015 0506 	ands.w	r5, r5, #6
 80032e4:	d106      	bne.n	80032f4 <_printf_common+0x48>
 80032e6:	f104 0a19 	add.w	sl, r4, #25
 80032ea:	68e3      	ldr	r3, [r4, #12]
 80032ec:	6832      	ldr	r2, [r6, #0]
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	42ab      	cmp	r3, r5
 80032f2:	dc26      	bgt.n	8003342 <_printf_common+0x96>
 80032f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032f8:	1e13      	subs	r3, r2, #0
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	bf18      	it	ne
 80032fe:	2301      	movne	r3, #1
 8003300:	0692      	lsls	r2, r2, #26
 8003302:	d42b      	bmi.n	800335c <_printf_common+0xb0>
 8003304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003308:	4649      	mov	r1, r9
 800330a:	4638      	mov	r0, r7
 800330c:	47c0      	blx	r8
 800330e:	3001      	adds	r0, #1
 8003310:	d01e      	beq.n	8003350 <_printf_common+0xa4>
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	68e5      	ldr	r5, [r4, #12]
 8003316:	6832      	ldr	r2, [r6, #0]
 8003318:	f003 0306 	and.w	r3, r3, #6
 800331c:	2b04      	cmp	r3, #4
 800331e:	bf08      	it	eq
 8003320:	1aad      	subeq	r5, r5, r2
 8003322:	68a3      	ldr	r3, [r4, #8]
 8003324:	6922      	ldr	r2, [r4, #16]
 8003326:	bf0c      	ite	eq
 8003328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800332c:	2500      	movne	r5, #0
 800332e:	4293      	cmp	r3, r2
 8003330:	bfc4      	itt	gt
 8003332:	1a9b      	subgt	r3, r3, r2
 8003334:	18ed      	addgt	r5, r5, r3
 8003336:	2600      	movs	r6, #0
 8003338:	341a      	adds	r4, #26
 800333a:	42b5      	cmp	r5, r6
 800333c:	d11a      	bne.n	8003374 <_printf_common+0xc8>
 800333e:	2000      	movs	r0, #0
 8003340:	e008      	b.n	8003354 <_printf_common+0xa8>
 8003342:	2301      	movs	r3, #1
 8003344:	4652      	mov	r2, sl
 8003346:	4649      	mov	r1, r9
 8003348:	4638      	mov	r0, r7
 800334a:	47c0      	blx	r8
 800334c:	3001      	adds	r0, #1
 800334e:	d103      	bne.n	8003358 <_printf_common+0xac>
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003358:	3501      	adds	r5, #1
 800335a:	e7c6      	b.n	80032ea <_printf_common+0x3e>
 800335c:	18e1      	adds	r1, r4, r3
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	2030      	movs	r0, #48	; 0x30
 8003362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003366:	4422      	add	r2, r4
 8003368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800336c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003370:	3302      	adds	r3, #2
 8003372:	e7c7      	b.n	8003304 <_printf_common+0x58>
 8003374:	2301      	movs	r3, #1
 8003376:	4622      	mov	r2, r4
 8003378:	4649      	mov	r1, r9
 800337a:	4638      	mov	r0, r7
 800337c:	47c0      	blx	r8
 800337e:	3001      	adds	r0, #1
 8003380:	d0e6      	beq.n	8003350 <_printf_common+0xa4>
 8003382:	3601      	adds	r6, #1
 8003384:	e7d9      	b.n	800333a <_printf_common+0x8e>
	...

08003388 <_printf_i>:
 8003388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800338c:	460c      	mov	r4, r1
 800338e:	4691      	mov	r9, r2
 8003390:	7e27      	ldrb	r7, [r4, #24]
 8003392:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003394:	2f78      	cmp	r7, #120	; 0x78
 8003396:	4680      	mov	r8, r0
 8003398:	469a      	mov	sl, r3
 800339a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800339e:	d807      	bhi.n	80033b0 <_printf_i+0x28>
 80033a0:	2f62      	cmp	r7, #98	; 0x62
 80033a2:	d80a      	bhi.n	80033ba <_printf_i+0x32>
 80033a4:	2f00      	cmp	r7, #0
 80033a6:	f000 80d8 	beq.w	800355a <_printf_i+0x1d2>
 80033aa:	2f58      	cmp	r7, #88	; 0x58
 80033ac:	f000 80a3 	beq.w	80034f6 <_printf_i+0x16e>
 80033b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033b8:	e03a      	b.n	8003430 <_printf_i+0xa8>
 80033ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033be:	2b15      	cmp	r3, #21
 80033c0:	d8f6      	bhi.n	80033b0 <_printf_i+0x28>
 80033c2:	a001      	add	r0, pc, #4	; (adr r0, 80033c8 <_printf_i+0x40>)
 80033c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80033c8:	08003421 	.word	0x08003421
 80033cc:	08003435 	.word	0x08003435
 80033d0:	080033b1 	.word	0x080033b1
 80033d4:	080033b1 	.word	0x080033b1
 80033d8:	080033b1 	.word	0x080033b1
 80033dc:	080033b1 	.word	0x080033b1
 80033e0:	08003435 	.word	0x08003435
 80033e4:	080033b1 	.word	0x080033b1
 80033e8:	080033b1 	.word	0x080033b1
 80033ec:	080033b1 	.word	0x080033b1
 80033f0:	080033b1 	.word	0x080033b1
 80033f4:	08003541 	.word	0x08003541
 80033f8:	08003465 	.word	0x08003465
 80033fc:	08003523 	.word	0x08003523
 8003400:	080033b1 	.word	0x080033b1
 8003404:	080033b1 	.word	0x080033b1
 8003408:	08003563 	.word	0x08003563
 800340c:	080033b1 	.word	0x080033b1
 8003410:	08003465 	.word	0x08003465
 8003414:	080033b1 	.word	0x080033b1
 8003418:	080033b1 	.word	0x080033b1
 800341c:	0800352b 	.word	0x0800352b
 8003420:	680b      	ldr	r3, [r1, #0]
 8003422:	1d1a      	adds	r2, r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	600a      	str	r2, [r1, #0]
 8003428:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800342c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003430:	2301      	movs	r3, #1
 8003432:	e0a3      	b.n	800357c <_printf_i+0x1f4>
 8003434:	6825      	ldr	r5, [r4, #0]
 8003436:	6808      	ldr	r0, [r1, #0]
 8003438:	062e      	lsls	r6, r5, #24
 800343a:	f100 0304 	add.w	r3, r0, #4
 800343e:	d50a      	bpl.n	8003456 <_printf_i+0xce>
 8003440:	6805      	ldr	r5, [r0, #0]
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	2d00      	cmp	r5, #0
 8003446:	da03      	bge.n	8003450 <_printf_i+0xc8>
 8003448:	232d      	movs	r3, #45	; 0x2d
 800344a:	426d      	negs	r5, r5
 800344c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003450:	485e      	ldr	r0, [pc, #376]	; (80035cc <_printf_i+0x244>)
 8003452:	230a      	movs	r3, #10
 8003454:	e019      	b.n	800348a <_printf_i+0x102>
 8003456:	f015 0f40 	tst.w	r5, #64	; 0x40
 800345a:	6805      	ldr	r5, [r0, #0]
 800345c:	600b      	str	r3, [r1, #0]
 800345e:	bf18      	it	ne
 8003460:	b22d      	sxthne	r5, r5
 8003462:	e7ef      	b.n	8003444 <_printf_i+0xbc>
 8003464:	680b      	ldr	r3, [r1, #0]
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	1d18      	adds	r0, r3, #4
 800346a:	6008      	str	r0, [r1, #0]
 800346c:	0628      	lsls	r0, r5, #24
 800346e:	d501      	bpl.n	8003474 <_printf_i+0xec>
 8003470:	681d      	ldr	r5, [r3, #0]
 8003472:	e002      	b.n	800347a <_printf_i+0xf2>
 8003474:	0669      	lsls	r1, r5, #25
 8003476:	d5fb      	bpl.n	8003470 <_printf_i+0xe8>
 8003478:	881d      	ldrh	r5, [r3, #0]
 800347a:	4854      	ldr	r0, [pc, #336]	; (80035cc <_printf_i+0x244>)
 800347c:	2f6f      	cmp	r7, #111	; 0x6f
 800347e:	bf0c      	ite	eq
 8003480:	2308      	moveq	r3, #8
 8003482:	230a      	movne	r3, #10
 8003484:	2100      	movs	r1, #0
 8003486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800348a:	6866      	ldr	r6, [r4, #4]
 800348c:	60a6      	str	r6, [r4, #8]
 800348e:	2e00      	cmp	r6, #0
 8003490:	bfa2      	ittt	ge
 8003492:	6821      	ldrge	r1, [r4, #0]
 8003494:	f021 0104 	bicge.w	r1, r1, #4
 8003498:	6021      	strge	r1, [r4, #0]
 800349a:	b90d      	cbnz	r5, 80034a0 <_printf_i+0x118>
 800349c:	2e00      	cmp	r6, #0
 800349e:	d04d      	beq.n	800353c <_printf_i+0x1b4>
 80034a0:	4616      	mov	r6, r2
 80034a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80034a6:	fb03 5711 	mls	r7, r3, r1, r5
 80034aa:	5dc7      	ldrb	r7, [r0, r7]
 80034ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034b0:	462f      	mov	r7, r5
 80034b2:	42bb      	cmp	r3, r7
 80034b4:	460d      	mov	r5, r1
 80034b6:	d9f4      	bls.n	80034a2 <_printf_i+0x11a>
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d10b      	bne.n	80034d4 <_printf_i+0x14c>
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	07df      	lsls	r7, r3, #31
 80034c0:	d508      	bpl.n	80034d4 <_printf_i+0x14c>
 80034c2:	6923      	ldr	r3, [r4, #16]
 80034c4:	6861      	ldr	r1, [r4, #4]
 80034c6:	4299      	cmp	r1, r3
 80034c8:	bfde      	ittt	le
 80034ca:	2330      	movle	r3, #48	; 0x30
 80034cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80034d4:	1b92      	subs	r2, r2, r6
 80034d6:	6122      	str	r2, [r4, #16]
 80034d8:	f8cd a000 	str.w	sl, [sp]
 80034dc:	464b      	mov	r3, r9
 80034de:	aa03      	add	r2, sp, #12
 80034e0:	4621      	mov	r1, r4
 80034e2:	4640      	mov	r0, r8
 80034e4:	f7ff fee2 	bl	80032ac <_printf_common>
 80034e8:	3001      	adds	r0, #1
 80034ea:	d14c      	bne.n	8003586 <_printf_i+0x1fe>
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	b004      	add	sp, #16
 80034f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034f6:	4835      	ldr	r0, [pc, #212]	; (80035cc <_printf_i+0x244>)
 80034f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	680e      	ldr	r6, [r1, #0]
 8003500:	061f      	lsls	r7, r3, #24
 8003502:	f856 5b04 	ldr.w	r5, [r6], #4
 8003506:	600e      	str	r6, [r1, #0]
 8003508:	d514      	bpl.n	8003534 <_printf_i+0x1ac>
 800350a:	07d9      	lsls	r1, r3, #31
 800350c:	bf44      	itt	mi
 800350e:	f043 0320 	orrmi.w	r3, r3, #32
 8003512:	6023      	strmi	r3, [r4, #0]
 8003514:	b91d      	cbnz	r5, 800351e <_printf_i+0x196>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	f023 0320 	bic.w	r3, r3, #32
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	2310      	movs	r3, #16
 8003520:	e7b0      	b.n	8003484 <_printf_i+0xfc>
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	6023      	str	r3, [r4, #0]
 800352a:	2378      	movs	r3, #120	; 0x78
 800352c:	4828      	ldr	r0, [pc, #160]	; (80035d0 <_printf_i+0x248>)
 800352e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003532:	e7e3      	b.n	80034fc <_printf_i+0x174>
 8003534:	065e      	lsls	r6, r3, #25
 8003536:	bf48      	it	mi
 8003538:	b2ad      	uxthmi	r5, r5
 800353a:	e7e6      	b.n	800350a <_printf_i+0x182>
 800353c:	4616      	mov	r6, r2
 800353e:	e7bb      	b.n	80034b8 <_printf_i+0x130>
 8003540:	680b      	ldr	r3, [r1, #0]
 8003542:	6826      	ldr	r6, [r4, #0]
 8003544:	6960      	ldr	r0, [r4, #20]
 8003546:	1d1d      	adds	r5, r3, #4
 8003548:	600d      	str	r5, [r1, #0]
 800354a:	0635      	lsls	r5, r6, #24
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	d501      	bpl.n	8003554 <_printf_i+0x1cc>
 8003550:	6018      	str	r0, [r3, #0]
 8003552:	e002      	b.n	800355a <_printf_i+0x1d2>
 8003554:	0671      	lsls	r1, r6, #25
 8003556:	d5fb      	bpl.n	8003550 <_printf_i+0x1c8>
 8003558:	8018      	strh	r0, [r3, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	6123      	str	r3, [r4, #16]
 800355e:	4616      	mov	r6, r2
 8003560:	e7ba      	b.n	80034d8 <_printf_i+0x150>
 8003562:	680b      	ldr	r3, [r1, #0]
 8003564:	1d1a      	adds	r2, r3, #4
 8003566:	600a      	str	r2, [r1, #0]
 8003568:	681e      	ldr	r6, [r3, #0]
 800356a:	6862      	ldr	r2, [r4, #4]
 800356c:	2100      	movs	r1, #0
 800356e:	4630      	mov	r0, r6
 8003570:	f7fc fe2e 	bl	80001d0 <memchr>
 8003574:	b108      	cbz	r0, 800357a <_printf_i+0x1f2>
 8003576:	1b80      	subs	r0, r0, r6
 8003578:	6060      	str	r0, [r4, #4]
 800357a:	6863      	ldr	r3, [r4, #4]
 800357c:	6123      	str	r3, [r4, #16]
 800357e:	2300      	movs	r3, #0
 8003580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003584:	e7a8      	b.n	80034d8 <_printf_i+0x150>
 8003586:	6923      	ldr	r3, [r4, #16]
 8003588:	4632      	mov	r2, r6
 800358a:	4649      	mov	r1, r9
 800358c:	4640      	mov	r0, r8
 800358e:	47d0      	blx	sl
 8003590:	3001      	adds	r0, #1
 8003592:	d0ab      	beq.n	80034ec <_printf_i+0x164>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	079b      	lsls	r3, r3, #30
 8003598:	d413      	bmi.n	80035c2 <_printf_i+0x23a>
 800359a:	68e0      	ldr	r0, [r4, #12]
 800359c:	9b03      	ldr	r3, [sp, #12]
 800359e:	4298      	cmp	r0, r3
 80035a0:	bfb8      	it	lt
 80035a2:	4618      	movlt	r0, r3
 80035a4:	e7a4      	b.n	80034f0 <_printf_i+0x168>
 80035a6:	2301      	movs	r3, #1
 80035a8:	4632      	mov	r2, r6
 80035aa:	4649      	mov	r1, r9
 80035ac:	4640      	mov	r0, r8
 80035ae:	47d0      	blx	sl
 80035b0:	3001      	adds	r0, #1
 80035b2:	d09b      	beq.n	80034ec <_printf_i+0x164>
 80035b4:	3501      	adds	r5, #1
 80035b6:	68e3      	ldr	r3, [r4, #12]
 80035b8:	9903      	ldr	r1, [sp, #12]
 80035ba:	1a5b      	subs	r3, r3, r1
 80035bc:	42ab      	cmp	r3, r5
 80035be:	dcf2      	bgt.n	80035a6 <_printf_i+0x21e>
 80035c0:	e7eb      	b.n	800359a <_printf_i+0x212>
 80035c2:	2500      	movs	r5, #0
 80035c4:	f104 0619 	add.w	r6, r4, #25
 80035c8:	e7f5      	b.n	80035b6 <_printf_i+0x22e>
 80035ca:	bf00      	nop
 80035cc:	08003ea7 	.word	0x08003ea7
 80035d0:	08003eb8 	.word	0x08003eb8

080035d4 <_sbrk_r>:
 80035d4:	b538      	push	{r3, r4, r5, lr}
 80035d6:	4d06      	ldr	r5, [pc, #24]	; (80035f0 <_sbrk_r+0x1c>)
 80035d8:	2300      	movs	r3, #0
 80035da:	4604      	mov	r4, r0
 80035dc:	4608      	mov	r0, r1
 80035de:	602b      	str	r3, [r5, #0]
 80035e0:	f7fd fd12 	bl	8001008 <_sbrk>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d102      	bne.n	80035ee <_sbrk_r+0x1a>
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	b103      	cbz	r3, 80035ee <_sbrk_r+0x1a>
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	bd38      	pop	{r3, r4, r5, pc}
 80035f0:	20000150 	.word	0x20000150

080035f4 <__swbuf_r>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	460e      	mov	r6, r1
 80035f8:	4614      	mov	r4, r2
 80035fa:	4605      	mov	r5, r0
 80035fc:	b118      	cbz	r0, 8003606 <__swbuf_r+0x12>
 80035fe:	6983      	ldr	r3, [r0, #24]
 8003600:	b90b      	cbnz	r3, 8003606 <__swbuf_r+0x12>
 8003602:	f000 f9d9 	bl	80039b8 <__sinit>
 8003606:	4b21      	ldr	r3, [pc, #132]	; (800368c <__swbuf_r+0x98>)
 8003608:	429c      	cmp	r4, r3
 800360a:	d12b      	bne.n	8003664 <__swbuf_r+0x70>
 800360c:	686c      	ldr	r4, [r5, #4]
 800360e:	69a3      	ldr	r3, [r4, #24]
 8003610:	60a3      	str	r3, [r4, #8]
 8003612:	89a3      	ldrh	r3, [r4, #12]
 8003614:	071a      	lsls	r2, r3, #28
 8003616:	d52f      	bpl.n	8003678 <__swbuf_r+0x84>
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	b36b      	cbz	r3, 8003678 <__swbuf_r+0x84>
 800361c:	6923      	ldr	r3, [r4, #16]
 800361e:	6820      	ldr	r0, [r4, #0]
 8003620:	1ac0      	subs	r0, r0, r3
 8003622:	6963      	ldr	r3, [r4, #20]
 8003624:	b2f6      	uxtb	r6, r6
 8003626:	4283      	cmp	r3, r0
 8003628:	4637      	mov	r7, r6
 800362a:	dc04      	bgt.n	8003636 <__swbuf_r+0x42>
 800362c:	4621      	mov	r1, r4
 800362e:	4628      	mov	r0, r5
 8003630:	f000 f92e 	bl	8003890 <_fflush_r>
 8003634:	bb30      	cbnz	r0, 8003684 <__swbuf_r+0x90>
 8003636:	68a3      	ldr	r3, [r4, #8]
 8003638:	3b01      	subs	r3, #1
 800363a:	60a3      	str	r3, [r4, #8]
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	6022      	str	r2, [r4, #0]
 8003642:	701e      	strb	r6, [r3, #0]
 8003644:	6963      	ldr	r3, [r4, #20]
 8003646:	3001      	adds	r0, #1
 8003648:	4283      	cmp	r3, r0
 800364a:	d004      	beq.n	8003656 <__swbuf_r+0x62>
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	07db      	lsls	r3, r3, #31
 8003650:	d506      	bpl.n	8003660 <__swbuf_r+0x6c>
 8003652:	2e0a      	cmp	r6, #10
 8003654:	d104      	bne.n	8003660 <__swbuf_r+0x6c>
 8003656:	4621      	mov	r1, r4
 8003658:	4628      	mov	r0, r5
 800365a:	f000 f919 	bl	8003890 <_fflush_r>
 800365e:	b988      	cbnz	r0, 8003684 <__swbuf_r+0x90>
 8003660:	4638      	mov	r0, r7
 8003662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003664:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <__swbuf_r+0x9c>)
 8003666:	429c      	cmp	r4, r3
 8003668:	d101      	bne.n	800366e <__swbuf_r+0x7a>
 800366a:	68ac      	ldr	r4, [r5, #8]
 800366c:	e7cf      	b.n	800360e <__swbuf_r+0x1a>
 800366e:	4b09      	ldr	r3, [pc, #36]	; (8003694 <__swbuf_r+0xa0>)
 8003670:	429c      	cmp	r4, r3
 8003672:	bf08      	it	eq
 8003674:	68ec      	ldreq	r4, [r5, #12]
 8003676:	e7ca      	b.n	800360e <__swbuf_r+0x1a>
 8003678:	4621      	mov	r1, r4
 800367a:	4628      	mov	r0, r5
 800367c:	f000 f80c 	bl	8003698 <__swsetup_r>
 8003680:	2800      	cmp	r0, #0
 8003682:	d0cb      	beq.n	800361c <__swbuf_r+0x28>
 8003684:	f04f 37ff 	mov.w	r7, #4294967295
 8003688:	e7ea      	b.n	8003660 <__swbuf_r+0x6c>
 800368a:	bf00      	nop
 800368c:	08003eec 	.word	0x08003eec
 8003690:	08003f0c 	.word	0x08003f0c
 8003694:	08003ecc 	.word	0x08003ecc

08003698 <__swsetup_r>:
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <__swsetup_r+0xcc>)
 800369a:	b570      	push	{r4, r5, r6, lr}
 800369c:	681d      	ldr	r5, [r3, #0]
 800369e:	4606      	mov	r6, r0
 80036a0:	460c      	mov	r4, r1
 80036a2:	b125      	cbz	r5, 80036ae <__swsetup_r+0x16>
 80036a4:	69ab      	ldr	r3, [r5, #24]
 80036a6:	b913      	cbnz	r3, 80036ae <__swsetup_r+0x16>
 80036a8:	4628      	mov	r0, r5
 80036aa:	f000 f985 	bl	80039b8 <__sinit>
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <__swsetup_r+0xd0>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	d10f      	bne.n	80036d4 <__swsetup_r+0x3c>
 80036b4:	686c      	ldr	r4, [r5, #4]
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036bc:	0719      	lsls	r1, r3, #28
 80036be:	d42c      	bmi.n	800371a <__swsetup_r+0x82>
 80036c0:	06dd      	lsls	r5, r3, #27
 80036c2:	d411      	bmi.n	80036e8 <__swsetup_r+0x50>
 80036c4:	2309      	movs	r3, #9
 80036c6:	6033      	str	r3, [r6, #0]
 80036c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036cc:	81a3      	strh	r3, [r4, #12]
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
 80036d2:	e03e      	b.n	8003752 <__swsetup_r+0xba>
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <__swsetup_r+0xd4>)
 80036d6:	429c      	cmp	r4, r3
 80036d8:	d101      	bne.n	80036de <__swsetup_r+0x46>
 80036da:	68ac      	ldr	r4, [r5, #8]
 80036dc:	e7eb      	b.n	80036b6 <__swsetup_r+0x1e>
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <__swsetup_r+0xd8>)
 80036e0:	429c      	cmp	r4, r3
 80036e2:	bf08      	it	eq
 80036e4:	68ec      	ldreq	r4, [r5, #12]
 80036e6:	e7e6      	b.n	80036b6 <__swsetup_r+0x1e>
 80036e8:	0758      	lsls	r0, r3, #29
 80036ea:	d512      	bpl.n	8003712 <__swsetup_r+0x7a>
 80036ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ee:	b141      	cbz	r1, 8003702 <__swsetup_r+0x6a>
 80036f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036f4:	4299      	cmp	r1, r3
 80036f6:	d002      	beq.n	80036fe <__swsetup_r+0x66>
 80036f8:	4630      	mov	r0, r6
 80036fa:	f7ff fbd3 	bl	8002ea4 <_free_r>
 80036fe:	2300      	movs	r3, #0
 8003700:	6363      	str	r3, [r4, #52]	; 0x34
 8003702:	89a3      	ldrh	r3, [r4, #12]
 8003704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003708:	81a3      	strh	r3, [r4, #12]
 800370a:	2300      	movs	r3, #0
 800370c:	6063      	str	r3, [r4, #4]
 800370e:	6923      	ldr	r3, [r4, #16]
 8003710:	6023      	str	r3, [r4, #0]
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	f043 0308 	orr.w	r3, r3, #8
 8003718:	81a3      	strh	r3, [r4, #12]
 800371a:	6923      	ldr	r3, [r4, #16]
 800371c:	b94b      	cbnz	r3, 8003732 <__swsetup_r+0x9a>
 800371e:	89a3      	ldrh	r3, [r4, #12]
 8003720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d003      	beq.n	8003732 <__swsetup_r+0x9a>
 800372a:	4621      	mov	r1, r4
 800372c:	4630      	mov	r0, r6
 800372e:	f000 fa07 	bl	8003b40 <__smakebuf_r>
 8003732:	89a0      	ldrh	r0, [r4, #12]
 8003734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003738:	f010 0301 	ands.w	r3, r0, #1
 800373c:	d00a      	beq.n	8003754 <__swsetup_r+0xbc>
 800373e:	2300      	movs	r3, #0
 8003740:	60a3      	str	r3, [r4, #8]
 8003742:	6963      	ldr	r3, [r4, #20]
 8003744:	425b      	negs	r3, r3
 8003746:	61a3      	str	r3, [r4, #24]
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	b943      	cbnz	r3, 800375e <__swsetup_r+0xc6>
 800374c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003750:	d1ba      	bne.n	80036c8 <__swsetup_r+0x30>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	0781      	lsls	r1, r0, #30
 8003756:	bf58      	it	pl
 8003758:	6963      	ldrpl	r3, [r4, #20]
 800375a:	60a3      	str	r3, [r4, #8]
 800375c:	e7f4      	b.n	8003748 <__swsetup_r+0xb0>
 800375e:	2000      	movs	r0, #0
 8003760:	e7f7      	b.n	8003752 <__swsetup_r+0xba>
 8003762:	bf00      	nop
 8003764:	20000010 	.word	0x20000010
 8003768:	08003eec 	.word	0x08003eec
 800376c:	08003f0c 	.word	0x08003f0c
 8003770:	08003ecc 	.word	0x08003ecc

08003774 <abort>:
 8003774:	b508      	push	{r3, lr}
 8003776:	2006      	movs	r0, #6
 8003778:	f000 fa56 	bl	8003c28 <raise>
 800377c:	2001      	movs	r0, #1
 800377e:	f7fd fbcb 	bl	8000f18 <_exit>
	...

08003784 <__sflush_r>:
 8003784:	898a      	ldrh	r2, [r1, #12]
 8003786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378a:	4605      	mov	r5, r0
 800378c:	0710      	lsls	r0, r2, #28
 800378e:	460c      	mov	r4, r1
 8003790:	d458      	bmi.n	8003844 <__sflush_r+0xc0>
 8003792:	684b      	ldr	r3, [r1, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	dc05      	bgt.n	80037a4 <__sflush_r+0x20>
 8003798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	dc02      	bgt.n	80037a4 <__sflush_r+0x20>
 800379e:	2000      	movs	r0, #0
 80037a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037a6:	2e00      	cmp	r6, #0
 80037a8:	d0f9      	beq.n	800379e <__sflush_r+0x1a>
 80037aa:	2300      	movs	r3, #0
 80037ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037b0:	682f      	ldr	r7, [r5, #0]
 80037b2:	602b      	str	r3, [r5, #0]
 80037b4:	d032      	beq.n	800381c <__sflush_r+0x98>
 80037b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	075a      	lsls	r2, r3, #29
 80037bc:	d505      	bpl.n	80037ca <__sflush_r+0x46>
 80037be:	6863      	ldr	r3, [r4, #4]
 80037c0:	1ac0      	subs	r0, r0, r3
 80037c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037c4:	b10b      	cbz	r3, 80037ca <__sflush_r+0x46>
 80037c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037c8:	1ac0      	subs	r0, r0, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	4602      	mov	r2, r0
 80037ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037d0:	6a21      	ldr	r1, [r4, #32]
 80037d2:	4628      	mov	r0, r5
 80037d4:	47b0      	blx	r6
 80037d6:	1c43      	adds	r3, r0, #1
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	d106      	bne.n	80037ea <__sflush_r+0x66>
 80037dc:	6829      	ldr	r1, [r5, #0]
 80037de:	291d      	cmp	r1, #29
 80037e0:	d82c      	bhi.n	800383c <__sflush_r+0xb8>
 80037e2:	4a2a      	ldr	r2, [pc, #168]	; (800388c <__sflush_r+0x108>)
 80037e4:	40ca      	lsrs	r2, r1
 80037e6:	07d6      	lsls	r6, r2, #31
 80037e8:	d528      	bpl.n	800383c <__sflush_r+0xb8>
 80037ea:	2200      	movs	r2, #0
 80037ec:	6062      	str	r2, [r4, #4]
 80037ee:	04d9      	lsls	r1, r3, #19
 80037f0:	6922      	ldr	r2, [r4, #16]
 80037f2:	6022      	str	r2, [r4, #0]
 80037f4:	d504      	bpl.n	8003800 <__sflush_r+0x7c>
 80037f6:	1c42      	adds	r2, r0, #1
 80037f8:	d101      	bne.n	80037fe <__sflush_r+0x7a>
 80037fa:	682b      	ldr	r3, [r5, #0]
 80037fc:	b903      	cbnz	r3, 8003800 <__sflush_r+0x7c>
 80037fe:	6560      	str	r0, [r4, #84]	; 0x54
 8003800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003802:	602f      	str	r7, [r5, #0]
 8003804:	2900      	cmp	r1, #0
 8003806:	d0ca      	beq.n	800379e <__sflush_r+0x1a>
 8003808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800380c:	4299      	cmp	r1, r3
 800380e:	d002      	beq.n	8003816 <__sflush_r+0x92>
 8003810:	4628      	mov	r0, r5
 8003812:	f7ff fb47 	bl	8002ea4 <_free_r>
 8003816:	2000      	movs	r0, #0
 8003818:	6360      	str	r0, [r4, #52]	; 0x34
 800381a:	e7c1      	b.n	80037a0 <__sflush_r+0x1c>
 800381c:	6a21      	ldr	r1, [r4, #32]
 800381e:	2301      	movs	r3, #1
 8003820:	4628      	mov	r0, r5
 8003822:	47b0      	blx	r6
 8003824:	1c41      	adds	r1, r0, #1
 8003826:	d1c7      	bne.n	80037b8 <__sflush_r+0x34>
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0c4      	beq.n	80037b8 <__sflush_r+0x34>
 800382e:	2b1d      	cmp	r3, #29
 8003830:	d001      	beq.n	8003836 <__sflush_r+0xb2>
 8003832:	2b16      	cmp	r3, #22
 8003834:	d101      	bne.n	800383a <__sflush_r+0xb6>
 8003836:	602f      	str	r7, [r5, #0]
 8003838:	e7b1      	b.n	800379e <__sflush_r+0x1a>
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	e7ad      	b.n	80037a0 <__sflush_r+0x1c>
 8003844:	690f      	ldr	r7, [r1, #16]
 8003846:	2f00      	cmp	r7, #0
 8003848:	d0a9      	beq.n	800379e <__sflush_r+0x1a>
 800384a:	0793      	lsls	r3, r2, #30
 800384c:	680e      	ldr	r6, [r1, #0]
 800384e:	bf08      	it	eq
 8003850:	694b      	ldreq	r3, [r1, #20]
 8003852:	600f      	str	r7, [r1, #0]
 8003854:	bf18      	it	ne
 8003856:	2300      	movne	r3, #0
 8003858:	eba6 0807 	sub.w	r8, r6, r7
 800385c:	608b      	str	r3, [r1, #8]
 800385e:	f1b8 0f00 	cmp.w	r8, #0
 8003862:	dd9c      	ble.n	800379e <__sflush_r+0x1a>
 8003864:	6a21      	ldr	r1, [r4, #32]
 8003866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003868:	4643      	mov	r3, r8
 800386a:	463a      	mov	r2, r7
 800386c:	4628      	mov	r0, r5
 800386e:	47b0      	blx	r6
 8003870:	2800      	cmp	r0, #0
 8003872:	dc06      	bgt.n	8003882 <__sflush_r+0xfe>
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387a:	81a3      	strh	r3, [r4, #12]
 800387c:	f04f 30ff 	mov.w	r0, #4294967295
 8003880:	e78e      	b.n	80037a0 <__sflush_r+0x1c>
 8003882:	4407      	add	r7, r0
 8003884:	eba8 0800 	sub.w	r8, r8, r0
 8003888:	e7e9      	b.n	800385e <__sflush_r+0xda>
 800388a:	bf00      	nop
 800388c:	20400001 	.word	0x20400001

08003890 <_fflush_r>:
 8003890:	b538      	push	{r3, r4, r5, lr}
 8003892:	690b      	ldr	r3, [r1, #16]
 8003894:	4605      	mov	r5, r0
 8003896:	460c      	mov	r4, r1
 8003898:	b913      	cbnz	r3, 80038a0 <_fflush_r+0x10>
 800389a:	2500      	movs	r5, #0
 800389c:	4628      	mov	r0, r5
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	b118      	cbz	r0, 80038aa <_fflush_r+0x1a>
 80038a2:	6983      	ldr	r3, [r0, #24]
 80038a4:	b90b      	cbnz	r3, 80038aa <_fflush_r+0x1a>
 80038a6:	f000 f887 	bl	80039b8 <__sinit>
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <_fflush_r+0x6c>)
 80038ac:	429c      	cmp	r4, r3
 80038ae:	d11b      	bne.n	80038e8 <_fflush_r+0x58>
 80038b0:	686c      	ldr	r4, [r5, #4]
 80038b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0ef      	beq.n	800389a <_fflush_r+0xa>
 80038ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038bc:	07d0      	lsls	r0, r2, #31
 80038be:	d404      	bmi.n	80038ca <_fflush_r+0x3a>
 80038c0:	0599      	lsls	r1, r3, #22
 80038c2:	d402      	bmi.n	80038ca <_fflush_r+0x3a>
 80038c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038c6:	f000 f915 	bl	8003af4 <__retarget_lock_acquire_recursive>
 80038ca:	4628      	mov	r0, r5
 80038cc:	4621      	mov	r1, r4
 80038ce:	f7ff ff59 	bl	8003784 <__sflush_r>
 80038d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038d4:	07da      	lsls	r2, r3, #31
 80038d6:	4605      	mov	r5, r0
 80038d8:	d4e0      	bmi.n	800389c <_fflush_r+0xc>
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	059b      	lsls	r3, r3, #22
 80038de:	d4dd      	bmi.n	800389c <_fflush_r+0xc>
 80038e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038e2:	f000 f908 	bl	8003af6 <__retarget_lock_release_recursive>
 80038e6:	e7d9      	b.n	800389c <_fflush_r+0xc>
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <_fflush_r+0x70>)
 80038ea:	429c      	cmp	r4, r3
 80038ec:	d101      	bne.n	80038f2 <_fflush_r+0x62>
 80038ee:	68ac      	ldr	r4, [r5, #8]
 80038f0:	e7df      	b.n	80038b2 <_fflush_r+0x22>
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <_fflush_r+0x74>)
 80038f4:	429c      	cmp	r4, r3
 80038f6:	bf08      	it	eq
 80038f8:	68ec      	ldreq	r4, [r5, #12]
 80038fa:	e7da      	b.n	80038b2 <_fflush_r+0x22>
 80038fc:	08003eec 	.word	0x08003eec
 8003900:	08003f0c 	.word	0x08003f0c
 8003904:	08003ecc 	.word	0x08003ecc

08003908 <std>:
 8003908:	2300      	movs	r3, #0
 800390a:	b510      	push	{r4, lr}
 800390c:	4604      	mov	r4, r0
 800390e:	e9c0 3300 	strd	r3, r3, [r0]
 8003912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003916:	6083      	str	r3, [r0, #8]
 8003918:	8181      	strh	r1, [r0, #12]
 800391a:	6643      	str	r3, [r0, #100]	; 0x64
 800391c:	81c2      	strh	r2, [r0, #14]
 800391e:	6183      	str	r3, [r0, #24]
 8003920:	4619      	mov	r1, r3
 8003922:	2208      	movs	r2, #8
 8003924:	305c      	adds	r0, #92	; 0x5c
 8003926:	f7ff fa3d 	bl	8002da4 <memset>
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <std+0x38>)
 800392c:	6263      	str	r3, [r4, #36]	; 0x24
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <std+0x3c>)
 8003930:	62a3      	str	r3, [r4, #40]	; 0x28
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <std+0x40>)
 8003934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <std+0x44>)
 8003938:	6224      	str	r4, [r4, #32]
 800393a:	6323      	str	r3, [r4, #48]	; 0x30
 800393c:	bd10      	pop	{r4, pc}
 800393e:	bf00      	nop
 8003940:	08003c61 	.word	0x08003c61
 8003944:	08003c83 	.word	0x08003c83
 8003948:	08003cbb 	.word	0x08003cbb
 800394c:	08003cdf 	.word	0x08003cdf

08003950 <_cleanup_r>:
 8003950:	4901      	ldr	r1, [pc, #4]	; (8003958 <_cleanup_r+0x8>)
 8003952:	f000 b8af 	b.w	8003ab4 <_fwalk_reent>
 8003956:	bf00      	nop
 8003958:	08003891 	.word	0x08003891

0800395c <__sfmoreglue>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	1e4a      	subs	r2, r1, #1
 8003960:	2568      	movs	r5, #104	; 0x68
 8003962:	4355      	muls	r5, r2
 8003964:	460e      	mov	r6, r1
 8003966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800396a:	f7ff faeb 	bl	8002f44 <_malloc_r>
 800396e:	4604      	mov	r4, r0
 8003970:	b140      	cbz	r0, 8003984 <__sfmoreglue+0x28>
 8003972:	2100      	movs	r1, #0
 8003974:	e9c0 1600 	strd	r1, r6, [r0]
 8003978:	300c      	adds	r0, #12
 800397a:	60a0      	str	r0, [r4, #8]
 800397c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003980:	f7ff fa10 	bl	8002da4 <memset>
 8003984:	4620      	mov	r0, r4
 8003986:	bd70      	pop	{r4, r5, r6, pc}

08003988 <__sfp_lock_acquire>:
 8003988:	4801      	ldr	r0, [pc, #4]	; (8003990 <__sfp_lock_acquire+0x8>)
 800398a:	f000 b8b3 	b.w	8003af4 <__retarget_lock_acquire_recursive>
 800398e:	bf00      	nop
 8003990:	2000014c 	.word	0x2000014c

08003994 <__sfp_lock_release>:
 8003994:	4801      	ldr	r0, [pc, #4]	; (800399c <__sfp_lock_release+0x8>)
 8003996:	f000 b8ae 	b.w	8003af6 <__retarget_lock_release_recursive>
 800399a:	bf00      	nop
 800399c:	2000014c 	.word	0x2000014c

080039a0 <__sinit_lock_acquire>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__sinit_lock_acquire+0x8>)
 80039a2:	f000 b8a7 	b.w	8003af4 <__retarget_lock_acquire_recursive>
 80039a6:	bf00      	nop
 80039a8:	20000147 	.word	0x20000147

080039ac <__sinit_lock_release>:
 80039ac:	4801      	ldr	r0, [pc, #4]	; (80039b4 <__sinit_lock_release+0x8>)
 80039ae:	f000 b8a2 	b.w	8003af6 <__retarget_lock_release_recursive>
 80039b2:	bf00      	nop
 80039b4:	20000147 	.word	0x20000147

080039b8 <__sinit>:
 80039b8:	b510      	push	{r4, lr}
 80039ba:	4604      	mov	r4, r0
 80039bc:	f7ff fff0 	bl	80039a0 <__sinit_lock_acquire>
 80039c0:	69a3      	ldr	r3, [r4, #24]
 80039c2:	b11b      	cbz	r3, 80039cc <__sinit+0x14>
 80039c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c8:	f7ff bff0 	b.w	80039ac <__sinit_lock_release>
 80039cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039d0:	6523      	str	r3, [r4, #80]	; 0x50
 80039d2:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <__sinit+0x68>)
 80039d4:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <__sinit+0x6c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80039da:	42a3      	cmp	r3, r4
 80039dc:	bf04      	itt	eq
 80039de:	2301      	moveq	r3, #1
 80039e0:	61a3      	streq	r3, [r4, #24]
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 f820 	bl	8003a28 <__sfp>
 80039e8:	6060      	str	r0, [r4, #4]
 80039ea:	4620      	mov	r0, r4
 80039ec:	f000 f81c 	bl	8003a28 <__sfp>
 80039f0:	60a0      	str	r0, [r4, #8]
 80039f2:	4620      	mov	r0, r4
 80039f4:	f000 f818 	bl	8003a28 <__sfp>
 80039f8:	2200      	movs	r2, #0
 80039fa:	60e0      	str	r0, [r4, #12]
 80039fc:	2104      	movs	r1, #4
 80039fe:	6860      	ldr	r0, [r4, #4]
 8003a00:	f7ff ff82 	bl	8003908 <std>
 8003a04:	68a0      	ldr	r0, [r4, #8]
 8003a06:	2201      	movs	r2, #1
 8003a08:	2109      	movs	r1, #9
 8003a0a:	f7ff ff7d 	bl	8003908 <std>
 8003a0e:	68e0      	ldr	r0, [r4, #12]
 8003a10:	2202      	movs	r2, #2
 8003a12:	2112      	movs	r1, #18
 8003a14:	f7ff ff78 	bl	8003908 <std>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	61a3      	str	r3, [r4, #24]
 8003a1c:	e7d2      	b.n	80039c4 <__sinit+0xc>
 8003a1e:	bf00      	nop
 8003a20:	08003de0 	.word	0x08003de0
 8003a24:	08003951 	.word	0x08003951

08003a28 <__sfp>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	4607      	mov	r7, r0
 8003a2c:	f7ff ffac 	bl	8003988 <__sfp_lock_acquire>
 8003a30:	4b1e      	ldr	r3, [pc, #120]	; (8003aac <__sfp+0x84>)
 8003a32:	681e      	ldr	r6, [r3, #0]
 8003a34:	69b3      	ldr	r3, [r6, #24]
 8003a36:	b913      	cbnz	r3, 8003a3e <__sfp+0x16>
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f7ff ffbd 	bl	80039b8 <__sinit>
 8003a3e:	3648      	adds	r6, #72	; 0x48
 8003a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a44:	3b01      	subs	r3, #1
 8003a46:	d503      	bpl.n	8003a50 <__sfp+0x28>
 8003a48:	6833      	ldr	r3, [r6, #0]
 8003a4a:	b30b      	cbz	r3, 8003a90 <__sfp+0x68>
 8003a4c:	6836      	ldr	r6, [r6, #0]
 8003a4e:	e7f7      	b.n	8003a40 <__sfp+0x18>
 8003a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a54:	b9d5      	cbnz	r5, 8003a8c <__sfp+0x64>
 8003a56:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <__sfp+0x88>)
 8003a58:	60e3      	str	r3, [r4, #12]
 8003a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8003a60:	f000 f847 	bl	8003af2 <__retarget_lock_init_recursive>
 8003a64:	f7ff ff96 	bl	8003994 <__sfp_lock_release>
 8003a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a70:	6025      	str	r5, [r4, #0]
 8003a72:	61a5      	str	r5, [r4, #24]
 8003a74:	2208      	movs	r2, #8
 8003a76:	4629      	mov	r1, r5
 8003a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a7c:	f7ff f992 	bl	8002da4 <memset>
 8003a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a88:	4620      	mov	r0, r4
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a8c:	3468      	adds	r4, #104	; 0x68
 8003a8e:	e7d9      	b.n	8003a44 <__sfp+0x1c>
 8003a90:	2104      	movs	r1, #4
 8003a92:	4638      	mov	r0, r7
 8003a94:	f7ff ff62 	bl	800395c <__sfmoreglue>
 8003a98:	4604      	mov	r4, r0
 8003a9a:	6030      	str	r0, [r6, #0]
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	d1d5      	bne.n	8003a4c <__sfp+0x24>
 8003aa0:	f7ff ff78 	bl	8003994 <__sfp_lock_release>
 8003aa4:	230c      	movs	r3, #12
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	e7ee      	b.n	8003a88 <__sfp+0x60>
 8003aaa:	bf00      	nop
 8003aac:	08003de0 	.word	0x08003de0
 8003ab0:	ffff0001 	.word	0xffff0001

08003ab4 <_fwalk_reent>:
 8003ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab8:	4606      	mov	r6, r0
 8003aba:	4688      	mov	r8, r1
 8003abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ac0:	2700      	movs	r7, #0
 8003ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8003aca:	d505      	bpl.n	8003ad8 <_fwalk_reent+0x24>
 8003acc:	6824      	ldr	r4, [r4, #0]
 8003ace:	2c00      	cmp	r4, #0
 8003ad0:	d1f7      	bne.n	8003ac2 <_fwalk_reent+0xe>
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad8:	89ab      	ldrh	r3, [r5, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d907      	bls.n	8003aee <_fwalk_reent+0x3a>
 8003ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	d003      	beq.n	8003aee <_fwalk_reent+0x3a>
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	4630      	mov	r0, r6
 8003aea:	47c0      	blx	r8
 8003aec:	4307      	orrs	r7, r0
 8003aee:	3568      	adds	r5, #104	; 0x68
 8003af0:	e7e9      	b.n	8003ac6 <_fwalk_reent+0x12>

08003af2 <__retarget_lock_init_recursive>:
 8003af2:	4770      	bx	lr

08003af4 <__retarget_lock_acquire_recursive>:
 8003af4:	4770      	bx	lr

08003af6 <__retarget_lock_release_recursive>:
 8003af6:	4770      	bx	lr

08003af8 <__swhatbuf_r>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	460e      	mov	r6, r1
 8003afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b00:	2900      	cmp	r1, #0
 8003b02:	b096      	sub	sp, #88	; 0x58
 8003b04:	4614      	mov	r4, r2
 8003b06:	461d      	mov	r5, r3
 8003b08:	da07      	bge.n	8003b1a <__swhatbuf_r+0x22>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	602b      	str	r3, [r5, #0]
 8003b0e:	89b3      	ldrh	r3, [r6, #12]
 8003b10:	061a      	lsls	r2, r3, #24
 8003b12:	d410      	bmi.n	8003b36 <__swhatbuf_r+0x3e>
 8003b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b18:	e00e      	b.n	8003b38 <__swhatbuf_r+0x40>
 8003b1a:	466a      	mov	r2, sp
 8003b1c:	f000 f906 	bl	8003d2c <_fstat_r>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	dbf2      	blt.n	8003b0a <__swhatbuf_r+0x12>
 8003b24:	9a01      	ldr	r2, [sp, #4]
 8003b26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b2e:	425a      	negs	r2, r3
 8003b30:	415a      	adcs	r2, r3
 8003b32:	602a      	str	r2, [r5, #0]
 8003b34:	e7ee      	b.n	8003b14 <__swhatbuf_r+0x1c>
 8003b36:	2340      	movs	r3, #64	; 0x40
 8003b38:	2000      	movs	r0, #0
 8003b3a:	6023      	str	r3, [r4, #0]
 8003b3c:	b016      	add	sp, #88	; 0x58
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}

08003b40 <__smakebuf_r>:
 8003b40:	898b      	ldrh	r3, [r1, #12]
 8003b42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b44:	079d      	lsls	r5, r3, #30
 8003b46:	4606      	mov	r6, r0
 8003b48:	460c      	mov	r4, r1
 8003b4a:	d507      	bpl.n	8003b5c <__smakebuf_r+0x1c>
 8003b4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	6123      	str	r3, [r4, #16]
 8003b54:	2301      	movs	r3, #1
 8003b56:	6163      	str	r3, [r4, #20]
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd70      	pop	{r4, r5, r6, pc}
 8003b5c:	ab01      	add	r3, sp, #4
 8003b5e:	466a      	mov	r2, sp
 8003b60:	f7ff ffca 	bl	8003af8 <__swhatbuf_r>
 8003b64:	9900      	ldr	r1, [sp, #0]
 8003b66:	4605      	mov	r5, r0
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f7ff f9eb 	bl	8002f44 <_malloc_r>
 8003b6e:	b948      	cbnz	r0, 8003b84 <__smakebuf_r+0x44>
 8003b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b74:	059a      	lsls	r2, r3, #22
 8003b76:	d4ef      	bmi.n	8003b58 <__smakebuf_r+0x18>
 8003b78:	f023 0303 	bic.w	r3, r3, #3
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	e7e3      	b.n	8003b4c <__smakebuf_r+0xc>
 8003b84:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <__smakebuf_r+0x7c>)
 8003b86:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	6020      	str	r0, [r4, #0]
 8003b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	9b00      	ldr	r3, [sp, #0]
 8003b94:	6163      	str	r3, [r4, #20]
 8003b96:	9b01      	ldr	r3, [sp, #4]
 8003b98:	6120      	str	r0, [r4, #16]
 8003b9a:	b15b      	cbz	r3, 8003bb4 <__smakebuf_r+0x74>
 8003b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	f000 f8d5 	bl	8003d50 <_isatty_r>
 8003ba6:	b128      	cbz	r0, 8003bb4 <__smakebuf_r+0x74>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	f023 0303 	bic.w	r3, r3, #3
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	81a3      	strh	r3, [r4, #12]
 8003bb4:	89a0      	ldrh	r0, [r4, #12]
 8003bb6:	4305      	orrs	r5, r0
 8003bb8:	81a5      	strh	r5, [r4, #12]
 8003bba:	e7cd      	b.n	8003b58 <__smakebuf_r+0x18>
 8003bbc:	08003951 	.word	0x08003951

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff bf97 	b.w	8003af4 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20000148 	.word	0x20000148

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff bf92 	b.w	8003af6 <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	20000148 	.word	0x20000148

08003bd8 <_raise_r>:
 8003bd8:	291f      	cmp	r1, #31
 8003bda:	b538      	push	{r3, r4, r5, lr}
 8003bdc:	4604      	mov	r4, r0
 8003bde:	460d      	mov	r5, r1
 8003be0:	d904      	bls.n	8003bec <_raise_r+0x14>
 8003be2:	2316      	movs	r3, #22
 8003be4:	6003      	str	r3, [r0, #0]
 8003be6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bea:	bd38      	pop	{r3, r4, r5, pc}
 8003bec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003bee:	b112      	cbz	r2, 8003bf6 <_raise_r+0x1e>
 8003bf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003bf4:	b94b      	cbnz	r3, 8003c0a <_raise_r+0x32>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 f830 	bl	8003c5c <_getpid_r>
 8003bfc:	462a      	mov	r2, r5
 8003bfe:	4601      	mov	r1, r0
 8003c00:	4620      	mov	r0, r4
 8003c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c06:	f000 b817 	b.w	8003c38 <_kill_r>
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d00a      	beq.n	8003c24 <_raise_r+0x4c>
 8003c0e:	1c59      	adds	r1, r3, #1
 8003c10:	d103      	bne.n	8003c1a <_raise_r+0x42>
 8003c12:	2316      	movs	r3, #22
 8003c14:	6003      	str	r3, [r0, #0]
 8003c16:	2001      	movs	r0, #1
 8003c18:	e7e7      	b.n	8003bea <_raise_r+0x12>
 8003c1a:	2400      	movs	r4, #0
 8003c1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c20:	4628      	mov	r0, r5
 8003c22:	4798      	blx	r3
 8003c24:	2000      	movs	r0, #0
 8003c26:	e7e0      	b.n	8003bea <_raise_r+0x12>

08003c28 <raise>:
 8003c28:	4b02      	ldr	r3, [pc, #8]	; (8003c34 <raise+0xc>)
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	f7ff bfd3 	b.w	8003bd8 <_raise_r>
 8003c32:	bf00      	nop
 8003c34:	20000010 	.word	0x20000010

08003c38 <_kill_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d07      	ldr	r5, [pc, #28]	; (8003c58 <_kill_r+0x20>)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	602b      	str	r3, [r5, #0]
 8003c46:	f7fd f957 	bl	8000ef8 <_kill>
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	d102      	bne.n	8003c54 <_kill_r+0x1c>
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	b103      	cbz	r3, 8003c54 <_kill_r+0x1c>
 8003c52:	6023      	str	r3, [r4, #0]
 8003c54:	bd38      	pop	{r3, r4, r5, pc}
 8003c56:	bf00      	nop
 8003c58:	20000150 	.word	0x20000150

08003c5c <_getpid_r>:
 8003c5c:	f7fd b944 	b.w	8000ee8 <_getpid>

08003c60 <__sread>:
 8003c60:	b510      	push	{r4, lr}
 8003c62:	460c      	mov	r4, r1
 8003c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c68:	f000 f894 	bl	8003d94 <_read_r>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	bfab      	itete	ge
 8003c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c72:	89a3      	ldrhlt	r3, [r4, #12]
 8003c74:	181b      	addge	r3, r3, r0
 8003c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c7a:	bfac      	ite	ge
 8003c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c7e:	81a3      	strhlt	r3, [r4, #12]
 8003c80:	bd10      	pop	{r4, pc}

08003c82 <__swrite>:
 8003c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c86:	461f      	mov	r7, r3
 8003c88:	898b      	ldrh	r3, [r1, #12]
 8003c8a:	05db      	lsls	r3, r3, #23
 8003c8c:	4605      	mov	r5, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	4616      	mov	r6, r2
 8003c92:	d505      	bpl.n	8003ca0 <__swrite+0x1e>
 8003c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c98:	2302      	movs	r3, #2
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f000 f868 	bl	8003d70 <_lseek_r>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	4632      	mov	r2, r6
 8003cae:	463b      	mov	r3, r7
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb6:	f000 b817 	b.w	8003ce8 <_write_r>

08003cba <__sseek>:
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cc2:	f000 f855 	bl	8003d70 <_lseek_r>
 8003cc6:	1c43      	adds	r3, r0, #1
 8003cc8:	89a3      	ldrh	r3, [r4, #12]
 8003cca:	bf15      	itete	ne
 8003ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cd6:	81a3      	strheq	r3, [r4, #12]
 8003cd8:	bf18      	it	ne
 8003cda:	81a3      	strhne	r3, [r4, #12]
 8003cdc:	bd10      	pop	{r4, pc}

08003cde <__sclose>:
 8003cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce2:	f000 b813 	b.w	8003d0c <_close_r>
	...

08003ce8 <_write_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4d07      	ldr	r5, [pc, #28]	; (8003d08 <_write_r+0x20>)
 8003cec:	4604      	mov	r4, r0
 8003cee:	4608      	mov	r0, r1
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	602a      	str	r2, [r5, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f7fd f935 	bl	8000f66 <_write>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	d102      	bne.n	8003d06 <_write_r+0x1e>
 8003d00:	682b      	ldr	r3, [r5, #0]
 8003d02:	b103      	cbz	r3, 8003d06 <_write_r+0x1e>
 8003d04:	6023      	str	r3, [r4, #0]
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	20000150 	.word	0x20000150

08003d0c <_close_r>:
 8003d0c:	b538      	push	{r3, r4, r5, lr}
 8003d0e:	4d06      	ldr	r5, [pc, #24]	; (8003d28 <_close_r+0x1c>)
 8003d10:	2300      	movs	r3, #0
 8003d12:	4604      	mov	r4, r0
 8003d14:	4608      	mov	r0, r1
 8003d16:	602b      	str	r3, [r5, #0]
 8003d18:	f7fd f941 	bl	8000f9e <_close>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_close_r+0x1a>
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_close_r+0x1a>
 8003d24:	6023      	str	r3, [r4, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	20000150 	.word	0x20000150

08003d2c <_fstat_r>:
 8003d2c:	b538      	push	{r3, r4, r5, lr}
 8003d2e:	4d07      	ldr	r5, [pc, #28]	; (8003d4c <_fstat_r+0x20>)
 8003d30:	2300      	movs	r3, #0
 8003d32:	4604      	mov	r4, r0
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	f7fd f93c 	bl	8000fb6 <_fstat>
 8003d3e:	1c43      	adds	r3, r0, #1
 8003d40:	d102      	bne.n	8003d48 <_fstat_r+0x1c>
 8003d42:	682b      	ldr	r3, [r5, #0]
 8003d44:	b103      	cbz	r3, 8003d48 <_fstat_r+0x1c>
 8003d46:	6023      	str	r3, [r4, #0]
 8003d48:	bd38      	pop	{r3, r4, r5, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000150 	.word	0x20000150

08003d50 <_isatty_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4d06      	ldr	r5, [pc, #24]	; (8003d6c <_isatty_r+0x1c>)
 8003d54:	2300      	movs	r3, #0
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f7fd f93b 	bl	8000fd6 <_isatty>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_isatty_r+0x1a>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_isatty_r+0x1a>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	20000150 	.word	0x20000150

08003d70 <_lseek_r>:
 8003d70:	b538      	push	{r3, r4, r5, lr}
 8003d72:	4d07      	ldr	r5, [pc, #28]	; (8003d90 <_lseek_r+0x20>)
 8003d74:	4604      	mov	r4, r0
 8003d76:	4608      	mov	r0, r1
 8003d78:	4611      	mov	r1, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	602a      	str	r2, [r5, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f7fd f934 	bl	8000fec <_lseek>
 8003d84:	1c43      	adds	r3, r0, #1
 8003d86:	d102      	bne.n	8003d8e <_lseek_r+0x1e>
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	b103      	cbz	r3, 8003d8e <_lseek_r+0x1e>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
 8003d90:	20000150 	.word	0x20000150

08003d94 <_read_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d07      	ldr	r5, [pc, #28]	; (8003db4 <_read_r+0x20>)
 8003d98:	4604      	mov	r4, r0
 8003d9a:	4608      	mov	r0, r1
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	2200      	movs	r2, #0
 8003da0:	602a      	str	r2, [r5, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	f7fd f8c2 	bl	8000f2c <_read>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_read_r+0x1e>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_read_r+0x1e>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	20000150 	.word	0x20000150

08003db8 <_init>:
 8003db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dba:	bf00      	nop
 8003dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dbe:	bc08      	pop	{r3}
 8003dc0:	469e      	mov	lr, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_fini>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr
